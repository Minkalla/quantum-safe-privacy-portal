name: "WBS 2.2.3-4: Minimal CI Pipeline"

on:
  push:
    branches: [ "devin/*wbs-2-2-3-4*" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  typecheck-lint:
    name: "🔍 Typecheck and Lint"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        
      - name: "🦀 Setup Rust Environment"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy, rustfmt
          override: true
          
      - name: "🐍 Setup Python Environment"
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: "🔍 Rust Typecheck and Lint"
        working-directory: src/portal/mock-qynauth/src/rust_lib
        run: |
          cargo check --features kyber768,dilithium3
          cargo fmt --check
          cargo clippy --features kyber768,dilithium3 -- -D warnings
          
      - name: "🔍 Python Lint"
        working-directory: src/portal/mock-qynauth/src/python_app
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          python -m py_compile pqc_ffi.py
          python -m py_compile app/main.py
          flake8 . --max-line-length=88 --ignore=E203,W503
          black --check .
          isort --check-only .

  build-test:
    name: "🏗️ Build and Test"
    runs-on: ubuntu-latest
    needs: typecheck-lint
    timeout-minutes: 5
    
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        
      - name: "🦀 Setup Rust Environment"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: "🐍 Setup Python Environment"
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: "🏗️ Build Rust Library"
        working-directory: src/portal/mock-qynauth/src/rust_lib
        run: |
          cargo build --release --features kyber768,dilithium3
          
      - name: "🧪 Run Essential Tests"
        working-directory: src/portal/mock-qynauth/src/rust_lib
        run: |
          cargo test --features kyber768,dilithium3 --verbose
          
      - name: "📦 Package Artifacts"
        run: |
          mkdir -p /tmp/artifacts
          if [ -f "src/portal/mock-qynauth/src/rust_lib/target/release/libqynauth_pqc.so" ]; then
            cp src/portal/mock-qynauth/src/rust_lib/target/release/libqynauth_pqc.so /tmp/artifacts/
          fi
          echo "✅ Build and test completed successfully"
