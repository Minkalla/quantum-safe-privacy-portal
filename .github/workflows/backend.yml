name: Minkalla Backend CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install Root Dependencies (including Jest)
      run: npm ci
      working-directory: .

    - name: Install Backend Dependencies
      run: npm ci
      working-directory: src/portal/portal-backend

    - name: Run Backend Lint
      run: npm run lint
      working-directory: src/portal/portal-backend

    - name: Build Backend
      run: npm run build
      working-directory: src/portal/portal-backend

    # NEW DEBUGGING STEPS FOR DOCKERFILE CONTENT
    - name: Debug - Print Dockerfile Content
      run: |
        echo "=== Full Dockerfile Content ==="
        cat src/portal/portal-backend/Dockerfile
        echo "=== End Dockerfile Content ==="
      working-directory: . # Run from root to easily access the Dockerfile path

    - name: Debug - Hex Dump of Problematic Dockerfile Lines
      run: |
        echo "=== Hex Dump of Dockerfile Lines 76-80 ==="
        # Extract lines 76-80 and show hex dump, looking for hidden characters
        tail -n +76 src/portal/portal-backend/Dockerfile | head -n 5 | od -xc
        echo "=== End Hex Dump ==="
      working-directory: . # Run from root to easily access the Dockerfile path

    - name: Build Docker Image
      run: docker build -t minkalla/portal-backend:latest .
      working-directory: src/portal/portal-backend

    - name: Run Backend Tests
      run: npm test
      working-directory: .
      continue-on-error: true
      env:
        JWT_ACCESS_SECRET_NAME: 'test/access/secret'
        JWT_REFRESH_SECRET_NAME: 'test/refresh/secret'
        MONGODB_URI: 'mongodb://localhost:27017/test_db'
        AWS_REGION: 'us-east-1'
        AWS_ACCESS_KEY_ID: 'dummy'
        AWS_SECRET_ACCESS_KEY: 'dummy'
        NODE_ENV: 'test'

    - name: Run Trivy Docker Image Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'portal-backend:latest'
        format: 'table'
        output: 'src/portal/portal-backend/trivy-results.txt'
        exit-code: '1'
        severity: 'HIGH,CRITICAL'
        ignore-unfixed: true
      continue-on-error: true

    - name: Upload Trivy Scan Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-scan-results
        path: src/portal/portal-backend/trivy-results.txt

  dast-scan-backend:
    needs: build-and-test-backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/portal/portal-backend # This is important: all 'run' commands in this job are relative to this path

    env:
      MONGODB_URI: 'mongodb://mongo:27017/portal_dev'
      JWT_ACCESS_SECRET_ID: 'super-secret-access-token-id-for-testing-only'
      JWT_REFRESH_SECRET_ID: 'super-secret-refresh-token-id-for-testing-only'
      AWS_REGION: 'us-east-1'
      AWS_ACCESS_KEY_ID: 'dummy'
      AWS_SECRET_ACCESS_KEY: 'dummy'
      NODE_ENV: 'development'
      ENABLE_SWAGGER_DOCS: 'true'
      FRONTEND_URL: 'http://localhost:3000'
      APP_VERSION: '0.1.0'
      PORT: '8080'
      SKIP_SECRETS_MANAGER: 'true'
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install Docker and Docker Compose Plugin
      run: |
        sudo apt-get update
        sudo apt-get install -y ca-certificates curl gnupg
        sudo install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        sudo chmod a+r /etc/apt/keyrings/docker.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        sudo usermod -aG docker $USER
        newgrp docker

    - name: Verify Docker and Docker Compose Installation
      run: |
        docker --version
        docker compose version

    - name: Docker Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ env.DOCKERHUB_TOKEN }}

    # Login to GitHub Container Registry for ZAP image
    - name: Login to GitHub Container Registry
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Start Backend Services with Docker Compose
      run: docker compose up -d 

    - name: Inspect Built Docker Image Contents
      run: |
        echo "Listing contents of /app in minkalla/portal-backend:latest image..."
        docker run --rm minkalla/portal-backend:latest ls -laR /app || true
        echo "Done inspecting image contents."

    - name: Get Backend Container Logs
      run: docker compose logs backend || true

    - name: Wait for Backend API to be Ready
      run: |
        echo "Waiting for http://localhost:8080/api-docs to be ready..."
        for i in $(seq 1 12); do
          curl -f http://localhost:8080/api-docs && echo "Backend API is ready!" && break
          echo "Backend API not ready yet. Retrying in 10 seconds..."
          sleep 10
        done
        curl -f http://localhost:8080/api-docs || { echo "Backend API did not become ready within timeout."; exit 1; }

    # Explicitly Pull ZAP Image from GHCR with correct repository name and stable tag
    - name: Explicitly Pull ZAP Image from GHCR
      run: docker pull ghcr.io/zaproxy/zaproxy:20240604-stable

    - name: Run OWASP ZAP Baseline Scan
      run: |
        # Ensure the mounted volume is writable by all for ZAP process.
        # This is run from the job's 'working-directory: src/portal/portal-backend',
        # so `$(pwd)` here resolves to `src/portal/portal-backend`.
        sudo chmod -R 777 $(pwd) 
        
        # Dynamically find the Docker Compose network name.
        network_name=$(docker network ls --format '{{.Name}}' | grep _default | head -n 1)
        
        # Run ZAP Baseline Scan.
        # -v "$(pwd)":/zap/wrk:rw: Mounts the job's working directory (`src/portal/portal-backend`) 
        #                           to `/zap/wrk` inside the ZAP container.
        # -r owasp_zap_report.html: ZAP writes the report with this filename relative to `/zap/wrk`.
        #                           Therefore, the file will be created at 
        #                           `src/portal/portal-backend/owasp_zap_report.html` on the runner.
        set +e
        docker run --rm --network "$network_name" -v "$(pwd)":/zap/wrk:rw -t ghcr.io/zaproxy/zaproxy:20240604-stable zap-baseline.py \
          -t http://backend:8080/api-docs \
          -r owasp_zap_report.html -z "-config api.disablekey=true"
        status=$?
        if [ $status -eq 2 ]; then
          echo "ZAP scan completed with warnings (exit code 2), treating as pass."
          exit 0
        else
          exit $status
        fi
    
    # REMOVED: The 'Move ZAP Report to Workspace Root' step is no longer needed.
    # It was causing the 'No such file or directory' error due to incorrect pathing
    # relative to the job's working directory. The file is already where it needs to be
    # for the next step.

    - name: Stop Backend Services
      if: always()
      run: docker compose down

    - name: Verify ZAP Report Exists
      if: always()
      run: |
        if [ ! -f owasp_zap_report.html ]; then
          echo "ZAP report not found!"
          exit 1
        fi

    - name: Upload OWASP ZAP Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: owasp-zap-report
        path: owasp_zap_report.html