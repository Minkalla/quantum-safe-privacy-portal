name: Minkalla Backend CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install Root Dependencies (including Jest)
      run: npm ci
      working-directory: .

    - name: Install Backend Dependencies
      run: npm ci
      working-directory: src/portal/portal-backend

    - name: Run Backend Lint
      run: npm run lint
      working-directory: src/portal/portal-backend

    - name: Build Backend
      run: npm run build
      working-directory: src/portal/portal-backend

    - name: Build Docker Image
      run: docker build -t portal-backend:latest .
      working-directory: src/portal/portal-backend

    - name: Run Backend Tests
      run: npm test
      working-directory: .
      continue-on-error: true
      env:
        JWT_ACCESS_SECRET_NAME: 'test/access/secret'
        JWT_REFRESH_SECRET_NAME: 'test/refresh/secret'
        MONGODB_URI: 'mongodb://localhost:27017/test_db'
        AWS_REGION: 'us-east-1'
        AWS_ACCESS_KEY_ID: 'dummy'
        AWS_SECRET_ACCESS_KEY: 'dummy'
        NODE_ENV: 'test'

    - name: Run Trivy Docker Image Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'portal-backend:latest'
        format: 'table'
        output: 'src/portal/portal-backend/trivy-results.txt'
        exit-code: '1'
        severity: 'HIGH,CRITICAL'
        ignore-unfixed: true
      continue-on-error: true

    - name: Upload Trivy Scan Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-scan-results
        path: src/portal/portal-backend/trivy-results.txt

  dast-scan-backend:
    needs: build-and-test-backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/portal/portal-backend
    env:
      MONGODB_URI: 'mongodb://mongo:27017/portal_dev'
      JWT_ACCESS_SECRET_ID: 'super-secret-access-token-id-for-testing-only'
      JWT_REFRESH_SECRET_ID: 'super-secret-refresh-token-id-for-testing-only'
      AWS_REGION: 'us-east-1'
      AWS_ACCESS_KEY_ID: 'dummy'
      AWS_SECRET_ACCESS_KEY: 'dummy'
      NODE_ENV: 'development'
      ENABLE_SWAGGER_DOCS: 'true'
      FRONTEND_URL: 'http://localhost:3000'
      APP_VERSION: '0.1.0'
      PORT: '8080'
      SKIP_SECRETS_MANAGER: 'true'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install Docker and Docker Compose Plugin
      run: |
        sudo apt-get update
        sudo apt-get install -y ca-certificates curl gnupg
        sudo install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        sudo chmod a+r /etc/apt/keyrings/docker.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        sudo usermod -aG docker $USER
        newgrp docker

    - name: Verify Docker and Docker Compose Installation
      run: |
        docker --version
        docker compose version

    - name: Start Backend Services with Docker Compose
      run: docker compose up -d
      continue-on-error: true

    - name: Debug - Check Container Status
      run: |
        echo "=== All containers status ==="
        docker ps -a
        echo "=== Docker compose status ==="
        docker compose ps
        echo "=== Backend container details ==="
        docker inspect portal-backend-backend-1 || true

    - name: Debug - Get Backend Container Logs (Multiple Attempts)
      run: |
        echo "=== Attempt 1: Docker compose logs ==="
        docker compose logs backend || true
        echo "=== Attempt 2: Direct docker logs ==="
        docker logs portal-backend-backend-1 || true
        echo "=== Attempt 3: Docker logs with follow (5 seconds) ==="
        timeout 5s docker logs -f portal-backend-backend-1 || true

    - name: Debug - Check if Container is Running
      run: |
        echo "=== Checking if backend container is running ==="
        if docker ps | grep portal-backend-backend-1; then
          echo "Container is running"
          echo "=== Trying to execute commands inside container ==="
          docker exec portal-backend-backend-1 ls -la /app || true
          docker exec portal-backend-backend-1 ls -la /app/dist || true
          docker exec portal-backend-backend-1 node --version || true
          docker exec portal-backend-backend-1 cat /app/package.json || true
        else
          echo "Container is NOT running"
          echo "=== Checking container exit code ==="
          docker ps -a --filter "name=portal-backend-backend-1" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        fi

    - name: Debug - Test Direct Node Execution in Container
      run: |
        echo "=== Attempting to run Node.js directly in container ==="
        docker run --rm \
          -e MONGODB_URI="$MONGODB_URI" \
          -e JWT_ACCESS_SECRET_ID="$JWT_ACCESS_SECRET_ID" \
          -e JWT_REFRESH_SECRET_ID="$JWT_REFRESH_SECRET_ID" \
          -e AWS_REGION="$AWS_REGION" \
          -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
          -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
          -e NODE_ENV="$NODE_ENV" \
          -e ENABLE_SWAGGER_DOCS="$ENABLE_SWAGGER_DOCS" \
          -e FRONTEND_URL="$FRONTEND_URL" \
          -e APP_VERSION="$APP_VERSION" \
          -e PORT="$PORT" \
          -e SKIP_SECRETS_MANAGER="$SKIP_SECRETS_MANAGER" \
          portal-backend-backend:latest \
          sh -c "node --version && ls -la /app && node dist/main.js" || true

    - name: Debug - Check Network Connectivity
      run: |
        echo "=== Docker network list ==="
        docker network ls
        echo "=== Inspect backend network ==="
        docker network inspect portal-backend_default || true
        echo "=== Test MongoDB connectivity ==="
        docker exec portal-backend-mongo-1 mongosh --eval "db.version()" || true

    - name: Wait for Backend API to be Ready
      run: |
        echo "Waiting for http://localhost:8080/portal/api-docs/ to be ready..."
        for i in $(seq 1 12); do
          curl -f http://localhost:8080/portal/api-docs/ && echo "Backend API is ready!" && break
          echo "Backend API not ready yet. Retrying in 10 seconds..."
          sleep 10
        done
        curl -f http://localhost:8080/portal/api-docs/ || { echo "Backend API did not become ready within timeout."; exit 1; }

    - name: Download and Install OWASP ZAP
      run: |
        ZAP_VERSION="2.15.0"
        wget https://github.com/zaproxy/zaproxy/releases/download/v${ZAP_VERSION}/ZAP_CLI-${ZAP_VERSION}.zip -O zap_cli.zip
        sudo unzip zap_cli.zip -d /opt/zap
        sudo chmod +x /opt/zap/zap.sh
        echo "/opt/zap" >> $GITHUB_PATH

    - name: Run OWASP ZAP Scan (CLI)
      run: |
        zap.sh -cmd \
               -port 8090 \
               -host 127.0.0.1 \
               -addoninstall zaproxy-openapi \
               -newsession zap_session \
               -config api.parameters.url=http://localhost:8080/portal/api-docs \
               -config api.openapi.url=http://localhost:8080/portal/api-docs \
               -target http://localhost:8080/portal/auth/login \
               -report /home/runner/work/quantum-safe-privacy-portal/quantum-safe-privacy-portal/src/portal/portal-backend/owasp_zap_report.html \
               -format html \
               -addonupdate \
               -cmd

    - name: Stop Backend Services
      if: always()
      run: docker compose down

    - name: Upload OWASP ZAP Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: owasp-zap-report
        path: src/portal/portal-backend/owasp_zap_report.html