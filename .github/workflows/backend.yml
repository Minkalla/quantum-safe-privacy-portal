name: Minkalla Backend CI/CD Workflow

on:
  push:
    branches:
      - main
      - 'feat/**'
      - 'devin/**'
  pull_request:
    branches:
      - main

jobs:
  build-and-test-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install Root Dependencies (including Jest)
      run: npm ci
      working-directory: .

    - name: Fix npm dependencies and install
      run: |
        # Remove lock file and node_modules to start fresh
        rm -f package-lock.json
        rm -rf node_modules
        # Generate new lock file
        npm install
      working-directory: src/portal/portal-backend

    - name: Setup MongoDB
      run: |
        # Import MongoDB GPG key
        curl -fsSL https://www.mongodb.org/static/pgp/server-6.0.asc | sudo gpg --dearmor -o /usr/share/keyrings/mongodb-server-6.0.gpg
        
        # Use jammy (22.04) repository - it's compatible with noble (24.04)
        echo "deb [arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
        
        # Update and install
        sudo apt-get update
        sudo apt-get install -y mongodb-org
        
        # Start MongoDB
        sudo systemctl start mongod
        sudo systemctl enable mongod
        
        # Wait for startup
        timeout 30 bash -c 'until nc -z localhost 27017; do sleep 1; done'
        
        # Verify
        mongod --version

    - name: Validate Backend Dependencies (npm audit)
      run: npm audit --audit-level=high || true
      working-directory: src/portal/portal-backend

    - name: Run Backend Lint
      run: npm run lint
      working-directory: src/portal/portal-backend

    - name: Build Backend
      run: npm run build
      working-directory: src/portal/portal-backend

    # NEW DEBUGGING STEPS FOR DOCKERFILE CONTENT
    - name: Debug - Print Dockerfile Content
      run: |
        echo "=== Full Dockerfile Content ==="
        cat src/portal/portal-backend/Dockerfile
        echo "=== End Dockerfile Content ==="
      working-directory: . # Run from root to easily access the Dockerfile path

    - name: Debug - Hex Dump of Problematic Dockerfile Lines
      run: |
        echo "=== Hex Dump of Dockerfile Lines 76-80 ==="
        # Extract lines 76-80 and show hex dump, looking for hidden characters
        tail -n +76 src/portal/portal-backend/Dockerfile | head -n 5 | od -xc
        echo "=== End Hex Dump ==="
      working-directory: . # Run from root to easily access the Dockerfile path

    - name: Build Docker Image
      run: docker build -t minkalla/portal-backend:latest .
      working-directory: src/portal/portal-backend

    - name: Run Backend Tests
      run: npm test
      working-directory: .
      env:
        JWT_ACCESS_SECRET_NAME: 'test/access/secret'
        JWT_REFRESH_SECRET_NAME: 'test/refresh/secret'
        MONGODB_URI: 'mongodb://localhost:27017/test_db'
        AWS_REGION: 'us-east-1'
        AWS_ACCESS_KEY_ID: 'dummy'
        AWS_SECRET_ACCESS_KEY: 'dummy'
        NODE_ENV: 'test'

    - name: Run Trivy Docker Image Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'minkalla/portal-backend:latest'
        format: 'table'
        output: 'src/portal/portal-backend/trivy-results.txt'
        exit-code: '1'
        severity: 'HIGH,CRITICAL'
        ignore-unfixed: true

    - name: Upload Trivy Scan Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-scan-results
        path: src/portal/portal-backend/trivy-results.txt

  cypress-e2e-tests:
    needs: build-and-test-backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/portal/portal-backend

    env:
      MONGODB_URI: 'mongodb://localhost:27017/e2e_test_db'
      JWT_ACCESS_SECRET_ID: 'test-access-secret-e2e'
      JWT_REFRESH_SECRET_ID: 'test-refresh-secret-e2e'
      AWS_REGION: 'us-east-1'
      AWS_ACCESS_KEY_ID: 'dummy'
      AWS_SECRET_ACCESS_KEY: 'dummy'
      NODE_ENV: 'test'
      SKIP_SECRETS_MANAGER: 'true'
      PORT: '8080'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'src/portal/portal-backend/package-lock.json'

    - name: Fix npm dependencies and install
      run: |
        # Remove lock file and node_modules to start fresh
        rm -f package-lock.json
        rm -rf node_modules
        # Generate new lock file
        npm install

    - name: Start MongoDB Service
      run: |
        # Install gnupg and curl if not available
        sudo apt-get update
        sudo apt-get install -y gnupg curl
        
        # Import MongoDB GPG key
        curl -fsSL https://www.mongodb.org/static/pgp/server-6.0.asc | sudo gpg --dearmor -o /usr/share/keyrings/mongodb-server-6.0.gpg
        
        # Use jammy (22.04) repository - it's compatible with noble (24.04)
        echo "deb [arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
        
        # Update package lists and install MongoDB
        sudo apt-get update
        sudo apt-get install -y mongodb-org
        
        # Start and enable MongoDB
        sudo systemctl start mongod
        sudo systemctl enable mongod
        
        # Wait for MongoDB readiness
        timeout 30 bash -c 'until nc -z localhost 27017; do sleep 1; done'
        
        # Verify installation
        mongod --version

    - name: Setup E2E Test Database
      run: |
        # Install MongoDB Database Tools from official repository
        wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
        echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
        sudo apt-get update
        sudo apt-get install -y mongodb-database-tools
        
        # Create test database and seed data
        node -e "
        const { setupE2EEnvironment } = require('./test/e2e/e2e-setup.js');
        setupE2EEnvironment().then(() => {
          console.log('E2E database setup completed');
          process.exit(0);
        }).catch(err => {
          console.error('E2E database setup failed:', err);
          process.exit(1);
        });
        "

    - name: Build Backend Application
      run: npm run build

    - name: Start Backend Server in Background
      run: |
        echo "Starting backend server with environment:"
        echo "SKIP_SECRETS_MANAGER=$SKIP_SECRETS_MANAGER"
        echo "MONGODB_URI=$MONGODB_URI"
        echo "NODE_ENV=$NODE_ENV"
        echo "PORT=$PORT"
        
        # Use production start command instead of dev
        npm run start:prod &
        echo $! > backend.pid
        
        # Give server more time to start and add debugging
        echo "Waiting for backend server to start..."
        sleep 5
        
        # Check if process is still running
        if kill -0 $(cat backend.pid) 2>/dev/null; then
          echo "Backend process is running (PID: $(cat backend.pid))"
        else
          echo "Backend process died, checking logs..."
          exit 1
        fi
        
        # Wait for backend to be ready with more verbose output
        timeout 90 bash -c 'until curl -f http://localhost:8080/api-docs; do 
          echo "Waiting for backend at http://localhost:8080/api-docs..."
          sleep 3
        done'

    - name: Run Cypress E2E Tests
      run: npx cypress run
      env:
        CYPRESS_baseUrl: 'http://localhost:8080'

    - name: Stop Backend Server
      if: always()
      run: |
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
          rm backend.pid
        fi

    - name: Cleanup E2E Test Database
      if: always()
      run: |
        node -e "
        const { cleanupE2EEnvironment } = require('./test/e2e/e2e-setup.js');
        cleanupE2EEnvironment().then(() => {
          console.log('E2E database cleanup completed');
        }).catch(err => {
          console.error('E2E database cleanup failed:', err);
        });
        "

    - name: Upload Cypress Screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots
        path: src/portal/portal-backend/test/e2e/screenshots

    - name: Upload Cypress Videos
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cypress-videos
        path: src/portal/portal-backend/test/e2e/videos

    - name: Upload Cypress Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cypress-test-results
        path: src/portal/portal-backend/test/e2e/results

  dast-scan-backend:
    needs: build-and-test-backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/portal/portal-backend # This is important: all 'run' commands in this job are relative to this path

    env:
      MONGODB_URI: 'mongodb://mongo:27017/portal_dev'
      JWT_ACCESS_SECRET_ID: 'super-secret-access-token-id-for-testing-only'
      JWT_REFRESH_SECRET_ID: 'super-secret-refresh-token-id-for-testing-only'
      AWS_REGION: 'us-east-1'
      AWS_ACCESS_KEY_ID: 'dummy'
      AWS_SECRET_ACCESS_KEY: 'dummy'
      NODE_ENV: 'development'
      ENABLE_SWAGGER_DOCS: 'true'
      FRONTEND_URL: 'http://localhost:3000'
      APP_VERSION: '0.1.0'
      PORT: '8080'
      SKIP_SECRETS_MANAGER: 'true'
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install Docker and Docker Compose Plugin
      run: |
        sudo apt-get update
        sudo apt-get install -y ca-certificates curl gnupg
        sudo install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        sudo chmod a+r /etc/apt/keyrings/docker.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        sudo usermod -aG docker $USER
        newgrp docker

    - name: Verify Docker and Docker Compose Installation
      run: |
        docker --version
        docker compose version

    - name: Docker Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ env.DOCKERHUB_TOKEN }}

    # Login to GitHub Container Registry for ZAP image
    - name: Login to GitHub Container Registry
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Start Backend Services with Docker Compose
      run: docker compose up -d 

    - name: Inspect Built Docker Image Contents
      run: |
        echo "Listing contents of /app in minkalla/portal-backend:latest image..."
        docker run --rm minkalla/portal-backend:latest ls -laR /app || true
        echo "Done inspecting image contents."

    - name: Get Backend Container Logs
      run: docker compose logs backend || true

    - name: Wait for Backend API to be Ready
      run: |
        echo "Waiting for http://localhost:8080/api-docs to be ready..."
        for i in $(seq 1 12); do
          curl -f http://localhost:8080/api-docs && echo "Backend API is ready!" && break
          echo "Backend API not ready yet. Retrying in 10 seconds..."
          sleep 10
        done
        curl -f http://localhost:8080/api-docs || { echo "Backend API did not become ready within timeout."; exit 1; }

    # Explicitly Pull ZAP Image from GHCR with correct repository name and stable tag
    - name: Explicitly Pull ZAP Image from GHCR
      run: docker pull ghcr.io/zaproxy/zaproxy:20240604-stable

    - name: Run OWASP ZAP Baseline Scan
      run: |
        # Ensure the mounted volume is writable by all for ZAP process.
        # This is run from the job's 'working-directory: src/portal/portal-backend',
        # so `$(pwd)` here resolves to `src/portal/portal-backend`.
        sudo chmod -R 777 $(pwd) 
        
        # Dynamically find the Docker Compose network name.
        network_name=$(docker network ls --format '{{.Name}}' | grep _default | head -n 1)
        
        # Run ZAP Baseline Scan.
        # -v "$(pwd)":/zap/wrk:rw: Mounts the job's working directory (`src/portal/portal-backend`) 
        #                           to `/zap/wrk` inside the ZAP container.
        # -r owasp_zap_report.html: ZAP writes the report with this filename relative to `/zap/wrk`.
        #                           Therefore, the file will be created at 
        #                           `src/portal/portal-backend/owasp_zap_report.html` on the runner.
        set +e
        docker run --rm --network "$network_name" -v "$(pwd)":/zap/wrk:rw -t ghcr.io/zaproxy/zaproxy:20240604-stable zap-baseline.py \
          -t http://backend:8080/api-docs \
          -r owasp_zap_report.html -z "-config api.disablekey=true"
        status=$?
        if [ $status -eq 2 ]; then
          echo "ZAP scan completed with warnings (exit code 2), treating as pass."
          exit 0
        else
          exit $status
        fi
    
    # REMOVED: The 'Move ZAP Report to Workspace Root' step is no longer needed.
    # It was causing the 'No such file or directory' error due to incorrect pathing
    # relative to the job's working directory. The file is already where it needs to be
    # for the next step.

    - name: Stop Backend Services
      if: always()
      run: docker compose down

    - name: Verify ZAP Report Exists
      if: always()
      run: |
        if [ ! -f owasp_zap_report.html ]; then
          echo "ZAP report not found!"
          exit 1
        fi

    - name: Upload OWASP ZAP Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: owasp-zap-report
        path: owasp_zap_report.html
