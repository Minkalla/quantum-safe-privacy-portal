(node:70473) [DEP0040] DeprecationWarning: The `punycode` module is deprecated. Please use a userland alternative instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
[31m[Nest] 70473  - [39m07/04/2025, 3:59:56 PM [31m  ERROR[39m [38;5;3m[JwtService] [39m[31mJWT secrets are not initialized. Cannot generate tokens.[39m
  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 2 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/consent.spec.ts:86:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/consent.spec.ts:88:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/consent.spec.ts:91:17)

FAIL test/consent.spec.ts (7.821 s)
  POST /portal/consent (Integration Tests)
    Success Cases
      ✕ should create consent successfully with valid payload and return 200 OK (286 ms)
      ✕ should update existing consent when granted status changes (227 ms)
    Invalid Payload Cases
      ✕ should return 400 Bad Request when userId is missing (226 ms)
      ✕ should return 400 Bad Request when consentType is invalid (226 ms)
      ✕ should return 400 Bad Request when granted is not a boolean (227 ms)
      ✕ should return 400 Bad Request when userId has invalid length (227 ms)
    Duplicate Consent Cases
      ✕ should return 409 Conflict when creating duplicate consent with same granted status (229 ms)
    Unauthorized Cases
      ✕ should return 401 Unauthorized when Authorization header is missing (229 ms)
      ✕ should return 401 Unauthorized when JWT token is invalid (227 ms)
      ✕ should return 401 Unauthorized when Bearer token is malformed (227 ms)
    Malformed JSON Cases
      ✕ should return 400 Bad Request when request body is malformed JSON (227 ms)
      ✕ should return 400 Bad Request when Content-Type is not application/json (225 ms)
    Edge Cases
      ✕ should handle optional fields correctly when not provided (227 ms)
      ✕ should validate IP address format when provided (227 ms)
      ✕ should handle maximum length userAgent correctly (227 ms)
    GET /portal/consent/:userId
      ✕ should retrieve consent records successfully (229 ms)
      ✕ should return 404 when no consent records found (225 ms)
      ✕ should return 401 Unauthorized when Authorization header is missing (225 ms)
      ✕ should return 401 Unauthorized when JWT token is invalid (225 ms)
      ✕ should return 400 Bad Request when user_id is malformed (226 ms)
      ✕ should return 400 Bad Request when user_id contains invalid characters (226 ms)

  ● POST /portal/consent (Integration Tests) › Success Cases › should create consent successfully with valid payload and return 200 OK

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Success Cases › should update existing consent when granted status changes

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Invalid Payload Cases › should return 400 Bad Request when userId is missing

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Invalid Payload Cases › should return 400 Bad Request when consentType is invalid

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Invalid Payload Cases › should return 400 Bad Request when granted is not a boolean

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Invalid Payload Cases › should return 400 Bad Request when userId has invalid length

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Duplicate Consent Cases › should return 409 Conflict when creating duplicate consent with same granted status

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Unauthorized Cases › should return 401 Unauthorized when Authorization header is missing

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Unauthorized Cases › should return 401 Unauthorized when JWT token is invalid

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Unauthorized Cases › should return 401 Unauthorized when Bearer token is malformed

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Malformed JSON Cases › should return 400 Bad Request when request body is malformed JSON

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Malformed JSON Cases › should return 400 Bad Request when Content-Type is not application/json

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Edge Cases › should handle optional fields correctly when not provided

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Edge Cases › should validate IP address format when provided

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Edge Cases › should handle maximum length userAgent correctly

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › GET /portal/consent/:userId › should retrieve consent records successfully

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › GET /portal/consent/:userId › should return 404 when no consent records found

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › GET /portal/consent/:userId › should return 401 Unauthorized when Authorization header is missing

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › GET /portal/consent/:userId › should return 401 Unauthorized when JWT token is invalid

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › GET /portal/consent/:userId › should return 400 Bad Request when user_id is malformed

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › GET /portal/consent/:userId › should return 400 Bad Request when user_id contains invalid characters

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

[31m[Nest] 70473  - [39m07/04/2025, 4:00:02 PM [31m  ERROR[39m [38;5;3m[JwtService] [39m[31mJWT secrets are not initialized. Cannot generate tokens.[39m
  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:80:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:82:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:85:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:85:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:80:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:82:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:85:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:85:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:80:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:82:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:85:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:85:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:80:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:82:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:85:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:85:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:80:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:82:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:85:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:85:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:80:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:82:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:85:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:85:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:80:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:82:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:85:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:85:17)

  console.log
    DEBUG: Cleaning database after test...

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:80:15)

  console.log
    DEBUG: Found 2 collections to clean

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:82:15)

  console.log
    DEBUG: Cleaned collection users, deleted 0 documents

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:85:17)

  console.log
    DEBUG: Cleaned collection consents, deleted 0 documents

      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:85:17)

FAIL test/e2e/consent-flow.spec.ts
  E2E Consent Flow Tests
    Full E2E Consent Workflow
      ✕ should complete full consent workflow: login simulation → consent creation → consent retrieval (375 ms)
      ✕ should handle multiple consent types in full workflow (650 ms)
      ✕ should handle consent workflow with authentication failure (223 ms)
      ✕ should handle consent update workflow (222 ms)
      ✕ should handle edge cases in E2E workflow (222 ms)
      ✕ should handle invalid user ID in E2E workflow (222 ms)
      ✕ should handle duplicate consent prevention in E2E workflow (223 ms)
      ✕ should handle complete workflow with IP address and user agent tracking (220 ms)

  ● E2E Consent Flow Tests › Full E2E Consent Workflow › should complete full consent workflow: login simulation → consent creation → consent retrieval

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:56:37)

  ● E2E Consent Flow Tests › Full E2E Consent Workflow › should handle multiple consent types in full workflow

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:56:37)

  ● E2E Consent Flow Tests › Full E2E Consent Workflow › should handle consent workflow with authentication failure

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:56:37)

  ● E2E Consent Flow Tests › Full E2E Consent Workflow › should handle consent update workflow

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:56:37)

  ● E2E Consent Flow Tests › Full E2E Consent Workflow › should handle edge cases in E2E workflow

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:56:37)

  ● E2E Consent Flow Tests › Full E2E Consent Workflow › should handle invalid user ID in E2E workflow

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:56:37)

  ● E2E Consent Flow Tests › Full E2E Consent Workflow › should handle duplicate consent prevention in E2E workflow

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:56:37)

  ● E2E Consent Flow Tests › Full E2E Consent Workflow › should handle complete workflow with IP address and user agent tracking

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:56:37)

  console.log
    DEBUG TS: Calling PQC service: generate_session_key with params: {"user_id":"test_user_kyber_768","metadata":{"operation":"key_generation","algorithm":"kyber-768"}}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for generate_session_key: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

  console.log
    DEBUG TS: Calling PQC service: generate_session_key with params: {"user_id":"test_user_1","metadata":{"operation":"key_generation","algorithm":"kyber-768"}}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for generate_session_key: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

  console.log
    DEBUG TS: Calling PQC service: generate_session_key with params: {"user_id":"test_user_2","metadata":{"operation":"key_generation","algorithm":"kyber-768"}}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for generate_session_key: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

  console.log
    DEBUG TS: Calling PQC service: generate_session_key with params: {"user_id":"test_user_entropy_0","metadata":{"operation":"key_generation","algorithm":"kyber-768"}}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for generate_session_key: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

  console.log
    DEBUG TS: Calling PQC service: generate_session_key with params: {"user_id":"test_user_entropy_1","metadata":{"operation":"key_generation","algorithm":"kyber-768"}}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for generate_session_key: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

  console.log
    DEBUG TS: Calling PQC service: generate_session_key with params: {"user_id":"test_user_entropy_2","metadata":{"operation":"key_generation","algorithm":"kyber-768"}}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for generate_session_key: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

  console.log
    DEBUG TS: Calling PQC service: generate_session_key with params: {"user_id":"test_user_entropy_3","metadata":{"operation":"key_generation","algorithm":"kyber-768"}}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for generate_session_key: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

  console.log
    DEBUG TS: Calling PQC service: generate_session_key with params: {"user_id":"test_user_entropy_4","metadata":{"operation":"key_generation","algorithm":"kyber-768"}}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for generate_session_key: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

  console.log
    DEBUG TS: Calling PQC service: generate_session_key with params: {"user_id":"test_user_session","metadata":{"operation":"key_generation","algorithm":"kyber-768"}}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for generate_session_key: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

  console.log
    DEBUG TS: Calling PQC service: generate_session_key with params: {"user_id":"test_user_session","metadata":{"operation":"key_generation","algorithm":"kyber-768"}}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for generate_session_key: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

  console.log
    DEBUG TS: Calling PQC service: generate_session_key with params: {"user_id":"test_user_session","metadata":{"operation":"key_generation","algorithm":"kyber-768"}}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for generate_session_key: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

  console.log
    DEBUG TS: Calling PQC service: generate_session_key with params: {"user_id":"test_user_session","metadata":{"operation":"key_generation","algorithm":"kyber-768"}}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for generate_session_key: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

  console.log
    DEBUG TS: Calling PQC service: verify_token with params: {"token":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==","user_id":"test_user_session"}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: verify_token - token length: 88

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:251:15)

  console.log
    DEBUG TS: verify_token - user_id: test_user_session

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:252:15)

  console.log
    DEBUG TS: verify_token - token preview: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==...

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:254:17)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for verify_token: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

  console.log
    DEBUG TS: Calling PQC service: generate_session_key with params: {"user_id":"test_nist_compliance","metadata":{"operation":"key_generation","algorithm":"kyber-768"}}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for generate_session_key: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

  console.log
    DEBUG TS: Calling PQC service: generate_session_key with params: {"user_id":"test_security_level_0","metadata":{"operation":"key_generation","algorithm":"kyber-768"}}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for generate_session_key: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

  console.log
    DEBUG TS: Calling PQC service: generate_session_key with params: {"user_id":"test_security_level_1","metadata":{"operation":"key_generation","algorithm":"kyber-768"}}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for generate_session_key: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

  console.log
    DEBUG TS: Calling PQC service: generate_session_key with params: {"user_id":"test_security_level_2","metadata":{"operation":"key_generation","algorithm":"kyber-768"}}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for generate_session_key: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

  console.log
    DEBUG TS: Calling PQC service: generate_session_key with params: {"user_id":"test_performance","metadata":{"operation":"key_generation","algorithm":"kyber-768"}}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for generate_session_key: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

  console.log
    DEBUG TS: Calling PQC service: generate_session_key with params: {"user_id":"test_verify_performance","metadata":{"operation":"key_generation","algorithm":"kyber-768"}}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for generate_session_key: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

FAIL test/unit/pqc/algorithms/kyber.test.ts
  Kyber ML-KEM-768 Algorithm Tests
    Kyber Key Generation
      ✕ should generate valid Kyber-768 key pairs with correct sizes (187 ms)
      ✕ should generate unique key pairs on multiple calls (269 ms)
      ✕ should generate cryptographically secure keys with sufficient entropy (653 ms)
    Kyber Session Key Operations
      ✕ should generate valid session keys with proper structure (137 ms)
      ✕ should validate session keys through verification (136 ms)
      ✕ should fail verification with wrong user context (136 ms)
      ✕ should fail verification with malformed token (268 ms)
    NIST Specification Compliance
      ✕ should comply with ML-KEM-768 parameter set (137 ms)
      ✕ should maintain security level 3 properties (392 ms)
    Performance Requirements
      ✓ should generate session keys within performance threshold (139 ms)
      ✕ should verify tokens within performance threshold (138 ms)

  ● Kyber ML-KEM-768 Algorithm Tests › Kyber Key Generation › should generate valid Kyber-768 key pairs with correct sizes

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      91 |
      92 |       expect(result).toBeDefined();
    > 93 |       expect(result.success).toBe(true);
         |                              ^
      94 |       expect(result.user_id).toBeDefined();
      95 |       expect(result.token).toBeDefined();
      96 |       expect(result.algorithm).toBeDefined();

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:93:30)

  ● Kyber ML-KEM-768 Algorithm Tests › Kyber Key Generation › should generate unique key pairs on multiple calls

    expect(received).not.toBe(expected) // Object.is equality

    Expected: not undefined

      113 |       });
      114 |
    > 115 |       expect(result1.token).not.toBe(result2.token);
          |                                 ^
      116 |       expect(result1.user_id).not.toBe(result2.user_id);
      117 |     });
      118 |

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:115:33)

  ● Kyber ML-KEM-768 Algorithm Tests › Kyber Key Generation › should generate cryptographically secure keys with sufficient entropy

    expect(received).toBe(expected) // Object.is equality

    Expected: 5
    Received: 0

      130 |
      131 |       const uniqueKeys = new Set(results);
    > 132 |       expect(uniqueKeys.size).toBe(5);
          |                               ^
      133 |     });
      134 |   });
      135 |

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:132:31)

  ● Kyber ML-KEM-768 Algorithm Tests › Kyber Session Key Operations › should generate valid session keys with proper structure

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      146 |     it('should generate valid session keys with proper structure', async () => {
      147 |       expect(sessionResult).toBeDefined();
    > 148 |       expect(sessionResult.success).toBe(true);
          |                                     ^
      149 |       expect(sessionResult.user_id).toBeDefined();
      150 |       expect(sessionResult.token).toBeDefined();
      151 |

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:148:37)

  ● Kyber ML-KEM-768 Algorithm Tests › Kyber Session Key Operations › should validate session keys through verification

    Session key not generated

      165 |     it('should validate session keys through verification', async () => {
      166 |       if (!sessionResult.token) {
    > 167 |         throw new Error('Session key not generated');
          |               ^
      168 |       }
      169 |
      170 |       const verifyResult = await authService['callPythonPQCService']('verify_token', {

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:167:15)

  ● Kyber ML-KEM-768 Algorithm Tests › Kyber Session Key Operations › should fail verification with wrong user context

    Session key not generated

      179 |     it('should fail verification with wrong user context', async () => {
      180 |       if (!sessionResult.token) {
    > 181 |         throw new Error('Session key not generated');
          |               ^
      182 |       }
      183 |
      184 |       const verifyResult = await authService['callPythonPQCService']('verify_token', {

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:181:15)

  ● Kyber ML-KEM-768 Algorithm Tests › Kyber Session Key Operations › should fail verification with malformed token

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      198 |       });
      199 |
    > 200 |       expect(verifyResult.success).toBe(true);
          |                                    ^
      201 |     });
      202 |   });
      203 |

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:200:36)

  ● Kyber ML-KEM-768 Algorithm Tests › NIST Specification Compliance › should comply with ML-KEM-768 parameter set

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      209 |       });
      210 |
    > 211 |       expect(result.success).toBe(true);
          |                              ^
      212 |       expect(result.user_id).toBeDefined();
      213 |       expect(result.token).toBeDefined();
      214 |       expect(result.algorithm).toBeDefined();

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:211:30)

  ● Kyber ML-KEM-768 Algorithm Tests › NIST Specification Compliance › should maintain security level 3 properties

    expect(received).toBe(expected) // Object.is equality

    Expected: 3
    Received: 0

      242 |
      243 |       const uniqueSecrets = new Set(results);
    > 244 |       expect(uniqueSecrets.size).toBe(iterations);
          |                                  ^
      245 |     });
      246 |   });
      247 |

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:244:34)

  ● Kyber ML-KEM-768 Algorithm Tests › Performance Requirements › should verify tokens within performance threshold

    Session key not generated

      266 |
      267 |       if (!sessionResult.token) {
    > 268 |         throw new Error('Session key not generated');
          |               ^
      269 |       }
      270 |
      271 |       const startTime = Date.now();

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:268:15)

[31m[Nest] 70473  - [39m07/04/2025, 4:00:10 PM [31m  ERROR[39m [38;5;3m[JwtAuthGuard] [39m[31mJWT Auth Guard - Authorization header is missing[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:10 PM [31m  ERROR[39m [38;5;3m[JwtAuthGuard] [39m[31mJWT Auth Guard - Invalid authorization header format: InvalidFormat token...[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:10 PM [31m  ERROR[39m [38;5;3m[JwtService] [39m[31mToken verification FAILED for type 'access': invalid token[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:10 PM [31m  ERROR[39m [38;5;3m[JwtService] [39m[31mError name: JsonWebTokenError[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:10 PM [31m  ERROR[39m [38;5;3m[JwtAuthGuard] [39m[31mJWT Auth Guard - verifyToken returned null payload[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:10 PM [31m  ERROR[39m [38;5;3m[JwtAuthGuard] [39m[31mJWT Auth Guard - Token verification failed: Invalid or expired JWT token[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:10 PM [31m  ERROR[39m [38;5;3m[JwtService] [39m[31mToken verification FAILED for type 'access': jwt malformed[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:10 PM [31m  ERROR[39m [38;5;3m[JwtService] [39m[31mError name: JsonWebTokenError[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:10 PM [31m  ERROR[39m [38;5;3m[JwtAuthGuard] [39m[31mJWT Auth Guard - verifyToken returned null payload[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:10 PM [31m  ERROR[39m [38;5;3m[JwtAuthGuard] [39m[31mJWT Auth Guard - Token verification failed: Invalid or expired JWT token[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:10 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation handshake. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:10 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation handshake failed after 93ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:10 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:10 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mUnsupported fallback operation for real RSA: handshake[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:10 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation handshake: Unsupported fallback operation: handshake[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:10 PM [31m  ERROR[39m [38;5;3m[PQCService] [39m[31m❌ PQC handshake failed for user 6867fa8ac1442de370674de5:[39m
Critical cryptographic fallback failure: Unsupported fallback operation: handshake
[31m[Nest] 70473  - [39m07/04/2025, 4:00:10 PM [31m  ERROR[39m [38;5;3m[AuthService] [39m[31mPQC handshake failed for user 6867fa8ac1442de370674de5:[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:10 PM [31m  ERROR[39m [38;5;3m[AuthService] [39m[31mError: Critical cryptographic fallback failure: Unsupported fallback operation: handshake[39m
  console.log
    DEBUG: Full set-cookie header: [
      'refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODY3ZmE4YWMxNDQyZGUzNzA2NzRkZTUiLCJlbWFpbCI6InRlc3RAZXhhbXBsZS5jb20iLCJpYXQiOjE3NTE2NDQ4MTAsImV4cCI6MTc1MjI0OTYxMH0.ZOR3c2sndZfkotRD0BOTHgZUfOII2UwEvTlK0BkcCKc; Path=/; Expires=Fri, 11 Jul 2025 16:00:10 GMT; HttpOnly; SameSite=Strict'
    ]

      at Object.<anonymous> (src/auth/auth.integration.spec.ts:166:15)

  console.log
    DEBUG: Found refresh token cookie: refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODY3ZmE4YWMxNDQyZGUzNzA2NzRkZTUiLCJlbWFpbCI6InRlc3RAZXhhbXBsZS5jb20iLCJpYXQiOjE3NTE2NDQ4MTAsImV4cCI6MTc1MjI0OTYxMH0.ZOR3c2sndZfkotRD0BOTHgZUfOII2UwEvTlK0BkcCKc; Path=/; Expires=Fri, 11 Jul 2025 16:00:10 GMT; HttpOnly; SameSite=Strict

      at Object.<anonymous> (src/auth/auth.integration.spec.ts:172:15)

  console.log
    DEBUG: Extracted refresh token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODY3ZmE4YWMxNDQyZGUzNzA2NzRkZTUiLCJlbWFpbCI6InRlc3RAZXhhbXBsZS5jb20iLCJpYXQiOjE3NTE2NDQ4MTAsImV4cCI6MTc1MjI0OTYxMH0.ZOR3c2sndZfkotRD0BOTHgZUfOII2UwEvTlK0BkcCKc

      at Object.<anonymous> (src/auth/auth.integration.spec.ts:176:15)

  console.log
    DEBUG: Refresh token length: 212

      at Object.<anonymous> (src/auth/auth.integration.spec.ts:177:15)

  console.log
    DEBUG: Refresh token first 50 chars: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiO

      at Object.<anonymous> (src/auth/auth.integration.spec.ts:178:15)

[31m[Nest] 70473  - [39m07/04/2025, 4:00:11 PM [31m  ERROR[39m [38;5;3m[JwtService] [39m[31mToken verification FAILED for type 'refresh': invalid token[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:11 PM [31m  ERROR[39m [38;5;3m[JwtService] [39m[31mError name: JsonWebTokenError[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:11 PM [31m  ERROR[39m [38;5;3m[AuthService] [39m[31mStep 1 FAILED: JWT verification returned null payload[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:11 PM [31m  ERROR[39m [38;5;3m[AuthService] [39m[31mToken refresh failed: Invalid refresh token[39m
FAIL src/auth/auth.integration.spec.ts
  Auth Integration (e2e)
    Protected Routes
      ✓ should return 401 for /portal/user/profile without token (60 ms)
      ✓ should return 401 for invalid token format (13 ms)
      ✓ should return 401 for malformed JWT token (23 ms)
      ✕ should allow access with valid JWT token (344 ms)
    Token Refresh Integration
      ✓ should refresh token with valid refresh token (883 ms)
      ✓ should return 401 for missing refresh token (7 ms)
      ✓ should return 401 for invalid refresh token (33 ms)

  ● Auth Integration (e2e) › Protected Routes › should allow access with valid JWT token

    expected 200 "OK", got 401 "Unauthorized"

      143 |         .get('/portal/user/profile')
      144 |         .set('Authorization', `Bearer ${authToken}`)
    > 145 |         .expect(200)
          |          ^
      146 |         .expect((res) => {
      147 |           expect(res.body).toMatchObject({
      148 |             status: 'success',

      at Object.<anonymous> (src/auth/auth.integration.spec.ts:145:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)
      at node_modules/supertest/lib/test.js:323:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)
      at Test.assert (node_modules/supertest/lib/test.js:179:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:135:14)

  console.log
    DEBUG TS: Calling PQC service: generate_session_key with params: {"user_id":"507f1f77bcf86cd799439011"}

      at AuthService.callPythonPQCService (src/auth/auth.service.ts:247:13)

  console.log
    DEBUG TS: Python process closed with code 1

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:290:17)

  console.log
    DEBUG TS: stdout length: 65

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:291:17)

  console.log
    DEBUG TS: stderr length: 174

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:292:17)

  console.log
    DEBUG TS: stderr content: INFO:__main__:Successfully imported real PQC FFI module
    ERROR:__main__:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:295:19)

  console.log
    DEBUG TS: PQC service response for generate_session_key: {"success":false,"error_message":"PQC service not available"}

      at ChildProcess.<anonymous> (src/auth/auth.service.ts:300:19)

[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation sign_token. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation sign_token failed after 101ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[ClassicalCryptoService] [39m[31mRSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[HybridCryptoService] [39m[31mBoth PQC and classical signing failed: RSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation sign_token: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCDataValidationService] [39m[31mData integrity creation failed: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation sign_token. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation sign_token failed after 87ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[ClassicalCryptoService] [39m[31mRSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[HybridCryptoService] [39m[31mBoth PQC and classical signing failed: RSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation sign_token: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCDataValidationService] [39m[31mML-DSA-65 signing failed for dataHash cf1e839a1f67b6c3bdeaa305d108446628dd5923ab90e17d5d60bb198767be41:[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCDataValidationService] [39m[31mError: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCDataValidationService] [39m[31mSignature generation failed: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation sign_token. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation sign_token failed after 89ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[ClassicalCryptoService] [39m[31mRSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[HybridCryptoService] [39m[31mBoth PQC and classical signing failed: RSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation sign_token: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCDataValidationService] [39m[31mData integrity creation failed: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation sign_token. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation sign_token failed after 106ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[ClassicalCryptoService] [39m[31mRSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[HybridCryptoService] [39m[31mBoth PQC and classical signing failed: RSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation sign_token: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCDataValidationService] [39m[31mData integrity creation failed: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation sign_token. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation sign_token failed after 130ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[ClassicalCryptoService] [39m[31mRSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[HybridCryptoService] [39m[31mBoth PQC and classical signing failed: RSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation sign_token: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCDataValidationService] [39m[31mData integrity creation failed: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation sign_token. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation sign_token failed after 140ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[ClassicalCryptoService] [39m[31mRSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[HybridCryptoService] [39m[31mBoth PQC and classical signing failed: RSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation sign_token: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCDataValidationService] [39m[31mData integrity creation failed: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation sign_token. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation sign_token failed after 149ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[ClassicalCryptoService] [39m[31mRSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[HybridCryptoService] [39m[31mBoth PQC and classical signing failed: RSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation sign_token: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCDataValidationService] [39m[31mData integrity creation failed: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation sign_token. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation sign_token failed after 158ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[ClassicalCryptoService] [39m[31mRSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[HybridCryptoService] [39m[31mBoth PQC and classical signing failed: RSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation sign_token: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCDataValidationService] [39m[31mData integrity creation failed: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation sign_token. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation sign_token failed after 168ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[ClassicalCryptoService] [39m[31mRSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[HybridCryptoService] [39m[31mBoth PQC and classical signing failed: RSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation sign_token: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCDataValidationService] [39m[31mData integrity creation failed: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation sign_token. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation sign_token failed after 121ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[ClassicalCryptoService] [39m[31mRSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[HybridCryptoService] [39m[31mBoth PQC and classical signing failed: RSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation sign_token: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCDataValidationService] [39m[31mData integrity creation failed: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation sign_token. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation sign_token failed after 131ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[ClassicalCryptoService] [39m[31mRSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[HybridCryptoService] [39m[31mBoth PQC and classical signing failed: RSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation sign_token: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCDataValidationService] [39m[31mData integrity creation failed: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation sign_token. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation sign_token failed after 112ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[ClassicalCryptoService] [39m[31mRSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[HybridCryptoService] [39m[31mBoth PQC and classical signing failed: RSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation sign_token: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:12 PM [31m  ERROR[39m [38;5;3m[PQCDataValidationService] [39m[31mData integrity creation failed: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
FAIL test/integration/pqc/pqc-auth-flow.test.ts
  PQC Authentication Flow Integration
    Complete PQC Authentication Flow
      ✕ should complete full PQC authentication cycle with real cryptographic operations (195 ms)
      ✕ should handle PQC-protected data operations end-to-end (105 ms)
      ✕ should validate cross-service PQC integration with performance monitoring (90 ms)
    PQC Error Handling and Resilience
      ✓ should handle PQC service failures gracefully with fallback mechanisms (3 ms)
      ✕ should maintain data integrity across service boundaries (91 ms)
    PQC Performance Integration
      ✕ should meet performance requirements for integrated PQC operations (108 ms)

  ● PQC Authentication Flow Integration › Complete PQC Authentication Flow › should complete full PQC authentication cycle with real cryptographic operations

    expect(received).toBeDefined()

    Received: undefined

       95 |       const pqcTokenResult = await authService.generatePQCToken(testUserId);
       96 |       expect(pqcTokenResult).toBeDefined();
    >  97 |       expect(pqcTokenResult.access_token).toBeDefined();
          |                                           ^
       98 |       expect(pqcTokenResult.pqc_enabled).toBe(true);
       99 |     });
      100 |

      at Object.<anonymous> (test/integration/pqc/pqc-auth-flow.test.ts:97:43)

  ● PQC Authentication Flow Integration › Complete PQC Authentication Flow › should handle PQC-protected data operations end-to-end

    Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)

      287 |     } catch (error) {
      288 |       this.logger.error(`Real RSA fallback failed for operation ${operation}: ${error.message}`);
    > 289 |       throw new Error(`Critical cryptographic fallback failure: ${error.message}`);
          |             ^
      290 |     }
      291 |   }
      292 |

      at PQCBridgeService.performFallbackOperation (src/services/pqc-bridge.service.ts:289:13)
      at PQCDataValidationService.createDataIntegrity (src/services/pqc-data-validation.service.ts:168:25)
      at Object.<anonymous> (test/integration/pqc/pqc-auth-flow.test.ts:120:29)

  ● PQC Authentication Flow Integration › Complete PQC Authentication Flow › should validate cross-service PQC integration with performance monitoring

    Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)

      287 |     } catch (error) {
      288 |       this.logger.error(`Real RSA fallback failed for operation ${operation}: ${error.message}`);
    > 289 |       throw new Error(`Critical cryptographic fallback failure: ${error.message}`);
          |             ^
      290 |     }
      291 |   }
      292 |

      at PQCBridgeService.performFallbackOperation (src/services/pqc-bridge.service.ts:289:13)
      at PQCDataValidationService.signWithDilithium (src/services/pqc-data-validation.service.ts:296:25)
      at PQCDataValidationService.generateSignature (src/services/pqc-data-validation.service.ts:48:21)
      at Object.<anonymous> (test/integration/pqc/pqc-auth-flow.test.ts:153:25)

  ● PQC Authentication Flow Integration › PQC Error Handling and Resilience › should maintain data integrity across service boundaries

    Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)

      287 |     } catch (error) {
      288 |       this.logger.error(`Real RSA fallback failed for operation ${operation}: ${error.message}`);
    > 289 |       throw new Error(`Critical cryptographic fallback failure: ${error.message}`);
          |             ^
      290 |     }
      291 |   }
      292 |

      at PQCBridgeService.performFallbackOperation (src/services/pqc-bridge.service.ts:289:13)
      at PQCDataValidationService.createDataIntegrity (src/services/pqc-data-validation.service.ts:168:25)
      at Object.<anonymous> (test/integration/pqc/pqc-auth-flow.test.ts:212:26)

  ● PQC Authentication Flow Integration › PQC Performance Integration › should meet performance requirements for integrated PQC operations

    Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)

      287 |     } catch (error) {
      288 |       this.logger.error(`Real RSA fallback failed for operation ${operation}: ${error.message}`);
    > 289 |       throw new Error(`Critical cryptographic fallback failure: ${error.message}`);
          |             ^
      290 |     }
      291 |   }
      292 |

      at PQCBridgeService.performFallbackOperation (src/services/pqc-bridge.service.ts:289:13)
      at PQCDataValidationService.createDataIntegrity (src/services/pqc-data-validation.service.ts:168:25)
      at test/integration/pqc/pqc-auth-flow.test.ts:245:29
          at async Promise.all (index 0)
      at Object.<anonymous> (test/integration/pqc/pqc-auth-flow.test.ts:238:23)

[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation sign_token. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation sign_token failed after 839ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[ClassicalCryptoService] [39m[31mRSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[HybridCryptoService] [39m[31mBoth PQC and classical signing failed: RSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation sign_token: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[PQCDataValidationService] [39m[31mData integrity creation failed: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation sign_token. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation sign_token failed after 96ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[ClassicalCryptoService] [39m[31mRSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[HybridCryptoService] [39m[31mBoth PQC and classical signing failed: RSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation sign_token: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[PQCDataValidationService] [39m[31mData integrity creation failed: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[PQCConsentController] [39m[31mPQC consent creation failed: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[ExceptionsHandler] [39m[31mCritical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
Error: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)
    at PQCBridgeService.performFallbackOperation (/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/src/services/pqc-bridge.service.ts:289:13)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at PQCDataValidationService.createDataIntegrity (/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/src/services/pqc-data-validation.service.ts:168:25)
    at PQCConsentController.createConsent (/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/src/controllers/pqc-consent.controller.ts:38:25)
    at /home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/node_modules/@nestjs/core/router/router-execution-context.js:46:28
    at /home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/node_modules/@nestjs/core/router/router-proxy.js:9:17
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation sign_token. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation sign_token failed after 93ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[ClassicalCryptoService] [39m[31mRSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[HybridCryptoService] [39m[31mBoth PQC and classical signing failed: RSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation sign_token: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[PQCDataValidationService] [39m[31mData integrity creation failed: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[PQCConsentController] [39m[31mPQC consent creation failed: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[ExceptionsHandler] [39m[31mCritical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
Error: Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)
    at PQCBridgeService.performFallbackOperation (/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/src/services/pqc-bridge.service.ts:289:13)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at PQCDataValidationService.createDataIntegrity (/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/src/services/pqc-data-validation.service.ts:168:25)
    at PQCConsentController.createConsent (/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/src/controllers/pqc-consent.controller.ts:38:25)
    at /home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/node_modules/@nestjs/core/router/router-execution-context.js:46:28
    at /home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/node_modules/@nestjs/core/router/router-proxy.js:9:17
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[JwtAuthGuard] [39m[31mJWT Auth Guard - Authorization header is missing[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[JwtService] [39m[31mToken verification FAILED for type 'access': jwt malformed[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:13 PM [31m  ERROR[39m [38;5;3m[JwtService] [39m[31mError name: JsonWebTokenError[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:14 PM [31m  ERROR[39m [38;5;3m[JwtAuthGuard] [39m[31mJWT Auth Guard - verifyToken returned null payload[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:14 PM [31m  ERROR[39m [38;5;3m[JwtAuthGuard] [39m[31mJWT Auth Guard - Token verification failed: Invalid or expired JWT token[39m
FAIL test/api/pqc-api.test.ts
  PQC API Endpoints
    PQC Consent API
      ✕ should create PQC-protected consent (151 ms)
      ✕ should retrieve PQC-protected consent (105 ms)
      ✕ should update PQC-protected consent (1 ms)
      ✓ should handle invalid consent ID (11 ms)
    PQC User API
      ✓ should enable PQC for user (10 ms)
      ✓ should get user PQC status (13 ms)
      ✓ should update PQC settings (9 ms)
      ✓ should disable PQC for user (8 ms)
    Authentication and Authorization
      ✓ should reject requests without JWT token (9 ms)
      ✓ should reject requests with invalid JWT token (17 ms)
    Input Validation
      ✓ should validate consent creation input (9 ms)
      ✓ should validate user options input (11 ms)

  ● PQC API Endpoints › PQC Consent API › should create PQC-protected consent

    expected 201 "Created", got 500 "Internal Server Error"

      63 |         .set('Authorization', `Bearer ${validJwtToken}`)
      64 |         .send(consentData)
    > 65 |         .expect(201);
         |          ^
      66 |
      67 |       expect(response.body.success).toBe(true);
      68 |       expect(response.body.algorithm).toBe('ML-KEM-768');

      at Object.<anonymous> (test/api/pqc-api.test.ts:65:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)
      at node_modules/supertest/lib/test.js:323:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)
      at Test.assert (node_modules/supertest/lib/test.js:179:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:135:14)

  ● PQC API Endpoints › PQC Consent API › should retrieve PQC-protected consent

    expected 201 "Created", got 500 "Internal Server Error"

      89 |           .set('Authorization', `Bearer ${validJwtToken}`)
      90 |           .send(consentData)
    > 91 |           .expect(201);
         |            ^
      92 |
      93 |         createdConsentId = createResponse.body.consentId;
      94 |       }

      at Object.<anonymous> (test/api/pqc-api.test.ts:91:12)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)
      at node_modules/supertest/lib/test.js:323:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)
      at Test.assert (node_modules/supertest/lib/test.js:179:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:135:14)

  ● PQC API Endpoints › PQC Consent API › should update PQC-protected consent

    No consent created in previous test

      108 |     it('should update PQC-protected consent', async () => {
      109 |       if (!createdConsentId) {
    > 110 |         throw new Error('No consent created in previous test');
          |               ^
      111 |       }
      112 |
      113 |       const updateData = {

      at Object.<anonymous> (test/api/pqc-api.test.ts:110:15)

  console.log
    FFI Verification Output: FFI_VERIFICATION_SUCCESS

      at ChildProcess.<anonymous> (test/integration/pqc/ffi-verification.test.ts:132:21)

  console.log
    FFI Verification Errors: INFO:pqc_service_bridge:Successfully imported real PQC FFI module
    ERROR:pqc_service_bridge:Failed to initialize PQC FFI library: Could not find PQC library. Please build the Rust library first.

      at ChildProcess.<anonymous> (test/integration/pqc/ffi-verification.test.ts:133:33)

  console.log
    Starting FFI roundtrip test for user: 507f1f77bcf86cd799439011

      at Object.<anonymous> (test/integration/pqc/ffi-verification.test.ts:157:15)

  console.log
    Test payload: {"action":"test_ffi_roundtrip","timestamp":"2025-07-04T16:00:14.870Z","data":"test_signature_verification"}

      at Object.<anonymous> (test/integration/pqc/ffi-verification.test.ts:158:15)

[31m[Nest] 70473  - [39m07/04/2025, 4:00:14 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation sign_token. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:14 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation sign_token failed after 94ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:14 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:14 PM [31m  ERROR[39m [38;5;3m[ClassicalCryptoService] [39m[31mRSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:14 PM [31m  ERROR[39m [38;5;3m[HybridCryptoService] [39m[31mBoth PQC and classical signing failed: RSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:14 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation sign_token: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
  console.log
    Starting ML-KEM FFI test for user: 507f1f77bcf86cd799439012

      at Object.<anonymous> (test/integration/pqc/ffi-verification.test.ts:209:15)

[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation generate_session_key. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation generate_session_key failed after 91ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
  console.log
    ML-KEM session generation successful: {
      algorithm: 'ML-KEM-768',
      duration_ms: 0,
      shared_secret_length: 34,
      ciphertext_length: 98
    }

      at Object.<anonymous> (test/integration/pqc/ffi-verification.test.ts:228:15)

  console.log
    === FFI TRACE START ===

      at Object.<anonymous> (test/integration/pqc/ffi-verification.test.ts:253:15)

  console.log
    User ID: 507f1f77bcf86cd799439013

      at Object.<anonymous> (test/integration/pqc/ffi-verification.test.ts:254:15)

  console.log
    Payload: {"operation":"ffi_trace_test","trace_id":"trace_1751644815121","metadata":{"test_type":"ffi_audit_trace","timestamp":"2025-07-04T16:00:15.121Z"}}

      at Object.<anonymous> (test/integration/pqc/ffi-verification.test.ts:255:15)

[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation sign_token. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation sign_token failed after 90ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[ClassicalCryptoService] [39m[31mRSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[HybridCryptoService] [39m[31mBoth PQC and classical signing failed: RSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation sign_token: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation sign_token. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation sign_token failed after 89ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[ClassicalCryptoService] [39m[31mRSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[HybridCryptoService] [39m[31mBoth PQC and classical signing failed: RSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation sign_token: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation sign_token. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation sign_token failed after 92ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[ClassicalCryptoService] [39m[31mRSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[HybridCryptoService] [39m[31mBoth PQC and classical signing failed: RSA signature generation failed: error:1E08010C:DECODER routines::unsupported[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:15 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation sign_token: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)[39m
FAIL test/integration/pqc/ffi-verification.test.ts
  PQC FFI Integration Verification
    Real FFI Module Usage Verification
      ✓ should verify that pqc_service_bridge.py uses pqc_ffi module (148 ms)
      ✕ should perform complete TypeScript -> Python -> Rust FFI roundtrip for ML-DSA signing (99 ms)
      ✕ should verify ML-KEM session key generation uses real FFI (137 ms)
      ✕ should log complete FFI trace for audit purposes (94 ms)
    Error Handling with Real FFI
      ✕ should handle invalid signatures properly with real verification (91 ms)
      ✕ should handle user ID mismatch with real FFI (94 ms)

  ● PQC FFI Integration Verification › Real FFI Module Usage Verification › should perform complete TypeScript -> Python -> Rust FFI roundtrip for ML-DSA signing

    Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)

      287 |     } catch (error) {
      288 |       this.logger.error(`Real RSA fallback failed for operation ${operation}: ${error.message}`);
    > 289 |       throw new Error(`Critical cryptographic fallback failure: ${error.message}`);
          |             ^
      290 |     }
      291 |   }
      292 |

      at PQCBridgeService.performFallbackOperation (src/services/pqc-bridge.service.ts:289:13)
      at Object.<anonymous> (test/integration/pqc/ffi-verification.test.ts:160:26)

  ● PQC FFI Integration Verification › Real FFI Module Usage Verification › should verify ML-KEM session key generation uses real FFI

    expect(received).toBeGreaterThan(expected)

    Matcher error: received value must be a number or bigint

    Received has value: undefined

      233 |       });
      234 |
    > 235 |       expect(sessionResult.performance_metrics?.duration_ms || sessionResult.performance_metrics?.generation_time_ms).toBeGreaterThan(0);
          |                                                                                                                       ^
      236 |       expect(sessionResult.performance_metrics?.duration_ms || sessionResult.performance_metrics?.generation_time_ms).toBeLessThan(5000);
      237 |
      238 |       expect(sessionResult.session_data?.shared_secret?.length).toBeGreaterThan(0);

      at Object.<anonymous> (test/integration/pqc/ffi-verification.test.ts:235:119)

  ● PQC FFI Integration Verification › Real FFI Module Usage Verification › should log complete FFI trace for audit purposes

    Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)

      287 |     } catch (error) {
      288 |       this.logger.error(`Real RSA fallback failed for operation ${operation}: ${error.message}`);
    > 289 |       throw new Error(`Critical cryptographic fallback failure: ${error.message}`);
          |             ^
      290 |     }
      291 |   }
      292 |

      at PQCBridgeService.performFallbackOperation (src/services/pqc-bridge.service.ts:289:13)
      at Object.<anonymous> (test/integration/pqc/ffi-verification.test.ts:259:26)

  ● PQC FFI Integration Verification › Error Handling with Real FFI › should handle invalid signatures properly with real verification

    Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)

      287 |     } catch (error) {
      288 |       this.logger.error(`Real RSA fallback failed for operation ${operation}: ${error.message}`);
    > 289 |       throw new Error(`Critical cryptographic fallback failure: ${error.message}`);
          |             ^
      290 |     }
      291 |   }
      292 |

      at PQCBridgeService.performFallbackOperation (src/services/pqc-bridge.service.ts:289:13)
      at Object.<anonymous> (test/integration/pqc/ffi-verification.test.ts:297:26)

  ● PQC FFI Integration Verification › Error Handling with Real FFI › should handle user ID mismatch with real FFI

    Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)

      287 |     } catch (error) {
      288 |       this.logger.error(`Real RSA fallback failed for operation ${operation}: ${error.message}`);
    > 289 |       throw new Error(`Critical cryptographic fallback failure: ${error.message}`);
          |             ^
      290 |     }
      291 |   }
      292 |

      at PQCBridgeService.performFallbackOperation (src/services/pqc-bridge.service.ts:289:13)
      at Object.<anonymous> (test/integration/pqc/ffi-verification.test.ts:325:26)

FAIL test/integration/pqc/database-integration.test.ts
  ● PQC Database Integration › PQC-Encrypted Data Storage › should store and retrieve PQC-encrypted user data from database

    Nest can't resolve dependencies of the AuthService (UserModel, JwtService, PQCFeatureFlagsService, PQCMonitoringService, ?, HybridCryptoService, QuantumSafeJWTService, PQCBridgeService). Please make sure that the argument PQCService at index [4] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCService is a provider, is it part of the current RootTestModule?
    - If PQCService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCService */ ]
      })

      37 |     const uri = mongod.getUri();
      38 |
    > 39 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      40 |       imports: [
      41 |         MongooseModule.forRoot(uri),
      42 |         MongooseModule.forFeature([

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 4)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 5)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:39:35)

  ● PQC Database Integration › PQC-Encrypted Data Storage › should store and retrieve PQC-encrypted user data from database

    TypeError: Cannot read properties of undefined (reading 'deleteMany')

      100 |
      101 |   afterEach(async () => {
    > 102 |     await userModel.deleteMany({});
          |                     ^
      103 |     await consentModel.deleteMany({});
      104 |   });
      105 |

      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:102:21)

  ● PQC Database Integration › PQC-Encrypted Data Storage › should store and retrieve PQC-encrypted consent data with signatures

    Nest can't resolve dependencies of the AuthService (UserModel, JwtService, PQCFeatureFlagsService, PQCMonitoringService, ?, HybridCryptoService, QuantumSafeJWTService, PQCBridgeService). Please make sure that the argument PQCService at index [4] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCService is a provider, is it part of the current RootTestModule?
    - If PQCService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCService */ ]
      })

      37 |     const uri = mongod.getUri();
      38 |
    > 39 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      40 |       imports: [
      41 |         MongooseModule.forRoot(uri),
      42 |         MongooseModule.forFeature([

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 4)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 5)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:39:35)

  ● PQC Database Integration › PQC-Encrypted Data Storage › should store and retrieve PQC-encrypted consent data with signatures

    TypeError: Cannot read properties of undefined (reading 'deleteMany')

      100 |
      101 |   afterEach(async () => {
    > 102 |     await userModel.deleteMany({});
          |                     ^
      103 |     await consentModel.deleteMany({});
      104 |   });
      105 |

      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:102:21)

  ● PQC Database Integration › Database Query Performance with PQC Data › should efficiently query PQC-encrypted data at scale

    Nest can't resolve dependencies of the AuthService (UserModel, JwtService, PQCFeatureFlagsService, PQCMonitoringService, ?, HybridCryptoService, QuantumSafeJWTService, PQCBridgeService). Please make sure that the argument PQCService at index [4] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCService is a provider, is it part of the current RootTestModule?
    - If PQCService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCService */ ]
      })

      37 |     const uri = mongod.getUri();
      38 |
    > 39 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      40 |       imports: [
      41 |         MongooseModule.forRoot(uri),
      42 |         MongooseModule.forFeature([

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 4)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 5)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:39:35)

  ● PQC Database Integration › Database Query Performance with PQC Data › should efficiently query PQC-encrypted data at scale

    TypeError: Cannot read properties of undefined (reading 'deleteMany')

      100 |
      101 |   afterEach(async () => {
    > 102 |     await userModel.deleteMany({});
          |                     ^
      103 |     await consentModel.deleteMany({});
      104 |   });
      105 |

      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:102:21)

  ● PQC Database Integration › Database Query Performance with PQC Data › should maintain data consistency during concurrent database operations

    Nest can't resolve dependencies of the AuthService (UserModel, JwtService, PQCFeatureFlagsService, PQCMonitoringService, ?, HybridCryptoService, QuantumSafeJWTService, PQCBridgeService). Please make sure that the argument PQCService at index [4] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCService is a provider, is it part of the current RootTestModule?
    - If PQCService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCService */ ]
      })

      37 |     const uri = mongod.getUri();
      38 |
    > 39 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      40 |       imports: [
      41 |         MongooseModule.forRoot(uri),
      42 |         MongooseModule.forFeature([

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 4)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 5)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:39:35)

  ● PQC Database Integration › Database Query Performance with PQC Data › should maintain data consistency during concurrent database operations

    TypeError: Cannot read properties of undefined (reading 'deleteMany')

      100 |
      101 |   afterEach(async () => {
    > 102 |     await userModel.deleteMany({});
          |                     ^
      103 |     await consentModel.deleteMany({});
      104 |   });
      105 |

      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:102:21)

  ● PQC Database Integration › Database Migration and Compatibility › should handle mixed PQC and non-PQC data in the same collection

    Nest can't resolve dependencies of the AuthService (UserModel, JwtService, PQCFeatureFlagsService, PQCMonitoringService, ?, HybridCryptoService, QuantumSafeJWTService, PQCBridgeService). Please make sure that the argument PQCService at index [4] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCService is a provider, is it part of the current RootTestModule?
    - If PQCService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCService */ ]
      })

      37 |     const uri = mongod.getUri();
      38 |
    > 39 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      40 |       imports: [
      41 |         MongooseModule.forRoot(uri),
      42 |         MongooseModule.forFeature([

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 4)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 5)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:39:35)

  ● PQC Database Integration › Database Migration and Compatibility › should handle mixed PQC and non-PQC data in the same collection

    TypeError: Cannot read properties of undefined (reading 'deleteMany')

      100 |
      101 |   afterEach(async () => {
    > 102 |     await userModel.deleteMany({});
          |                     ^
      103 |     await consentModel.deleteMany({});
      104 |   });
      105 |

      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:102:21)


  ● Test suite failed to run

    TypeError: Cannot read properties of undefined (reading 'close')

       95 |
       96 |   afterAll(async () => {
    >  97 |     await connection.close();
          |                      ^
       98 |     await mongod.stop();
       99 |   });
      100 |

      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:97:22)

FAIL test/unit/pqc/algorithms/dilithium.test.ts
  Dilithium ML-DSA-65 Algorithm Tests
    Dilithium Key Generation
      ✕ should generate valid Dilithium-3 key pairs with correct sizes (17 ms)
      ✕ should generate unique key pairs on multiple calls (8 ms)
      ✕ should generate cryptographically secure keys with sufficient entropy (6 ms)
    Dilithium Digital Signatures
      ✕ should create valid digital signatures (10 ms)
      ✕ should verify valid signatures correctly (6 ms)
      ✕ should handle signatures with different user context (6 ms)
      ✕ should handle signatures with tampered payload gracefully (6 ms)
      ✕ should reject malformed signatures (6 ms)
    NIST Specification Compliance
      ✕ should comply with ML-DSA-65 parameter set (6 ms)
      ✕ should maintain security level 3 properties (6 ms)
      ✕ should produce consistent signatures for same user and payload (6 ms)
    Performance Requirements
      ✕ should generate session keys within performance threshold (6 ms)
      ✕ should sign tokens within performance threshold (5 ms)
      ✕ should verify signatures within performance threshold (6 ms)
    Edge Cases and Error Handling
      ✕ should handle empty messages gracefully (6 ms)
      ✕ should handle large messages correctly (25 ms)
      ✕ should reject invalid user contexts (6 ms)

  ● Dilithium ML-DSA-65 Algorithm Tests › Dilithium Key Generation › should generate valid Dilithium-3 key pairs with correct sizes

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Dilithium Key Generation › should generate unique key pairs on multiple calls

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Dilithium Key Generation › should generate cryptographically secure keys with sufficient entropy

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Dilithium Digital Signatures › should create valid digital signatures

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Dilithium Digital Signatures › should verify valid signatures correctly

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Dilithium Digital Signatures › should handle signatures with different user context

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Dilithium Digital Signatures › should handle signatures with tampered payload gracefully

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Dilithium Digital Signatures › should reject malformed signatures

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › NIST Specification Compliance › should comply with ML-DSA-65 parameter set

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › NIST Specification Compliance › should maintain security level 3 properties

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › NIST Specification Compliance › should produce consistent signatures for same user and payload

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Performance Requirements › should generate session keys within performance threshold

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Performance Requirements › should sign tokens within performance threshold

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Performance Requirements › should verify signatures within performance threshold

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Edge Cases and Error Handling › should handle empty messages gracefully

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Edge Cases and Error Handling › should handle large messages correctly

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Edge Cases and Error Handling › should reject invalid user contexts

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

FAIL test/unit/pqc/services/pqc-data-validation.test.ts
  PQCDataValidationService
    Digital Signature Generation with Dilithium-3
      ✕ should generate valid digital signatures with ML-DSA-65 (19 ms)
      ✕ should create data integrity with real PQC operations (9 ms)
      ✕ should verify signatures correctly (7 ms)
      ✕ should detect data tampering (7 ms)
    Digital Signature Generation with Classical Fallback
      ✕ should generate and verify signatures with classical algorithm (7 ms)
    Data Integrity Validation
      ✕ should validate data integrity successfully (7 ms)
      ✕ should detect integrity violations (12 ms)
      ✕ should handle signature expiration (7 ms)
    Batch Operations
      ✕ should handle batch integrity validation (7 ms)
    Performance Requirements
      ✕ should complete signature generation within performance threshold (6 ms)
      ✕ should complete signature verification within performance threshold (6 ms)
      ✕ should complete data integrity creation within performance threshold (7 ms)
    Error Handling and Edge Cases
      ✕ should handle malformed signature data gracefully (7 ms)
      ✕ should handle empty data gracefully (7 ms)
      ✕ should handle large data payloads (7 ms)
      ✕ should handle invalid data types gracefully (7 ms)
      ✕ should handle signature verification errors gracefully (32 ms)

  ● PQCDataValidationService › Digital Signature Generation with Dilithium-3 › should generate valid digital signatures with ML-DSA-65

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Digital Signature Generation with Dilithium-3 › should create data integrity with real PQC operations

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Digital Signature Generation with Dilithium-3 › should verify signatures correctly

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Digital Signature Generation with Dilithium-3 › should detect data tampering

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Digital Signature Generation with Classical Fallback › should generate and verify signatures with classical algorithm

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Data Integrity Validation › should validate data integrity successfully

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Data Integrity Validation › should detect integrity violations

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Data Integrity Validation › should handle signature expiration

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Batch Operations › should handle batch integrity validation

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Performance Requirements › should complete signature generation within performance threshold

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Performance Requirements › should complete signature verification within performance threshold

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Performance Requirements › should complete data integrity creation within performance threshold

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Error Handling and Edge Cases › should handle malformed signature data gracefully

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Error Handling and Edge Cases › should handle empty data gracefully

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Error Handling and Edge Cases › should handle large data payloads

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Error Handling and Edge Cases › should handle invalid data types gracefully

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Error Handling and Edge Cases › should handle signature verification errors gracefully

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

FAIL test/unit/pqc/services/pqc-data-encryption.test.ts
  PQCDataEncryptionService
    Data Encryption with Kyber-768
      ✕ should encrypt data successfully with ML-KEM-768 (18 ms)
      ✕ should decrypt ML-KEM-768 encrypted data successfully (8 ms)
      ✕ should handle large data payloads with ML-KEM-768 (6 ms)
    Data Encryption with AES-256-GCM Fallback
      ✕ should encrypt and decrypt data with AES-256-GCM (7 ms)
      ✕ should handle AES encryption with custom key ID (6 ms)
    Key Management
      ✕ should generate unique encryption keys for different operations (10 ms)
      ✕ should handle key rotation gracefully (6 ms)
      ✕ should validate encrypted data integrity (7 ms)
    Performance and Monitoring
      ✕ should complete ML-KEM-768 encryption within performance threshold (6 ms)
      ✕ should complete AES-256-GCM encryption within performance threshold (6 ms)
      ✕ should complete decryption within performance threshold (6 ms)
    Error Handling
      ✕ should handle malformed encrypted data gracefully (6 ms)
      ✕ should handle empty data gracefully (6 ms)
      ✕ should handle encryption failures gracefully (6 ms)
      ✕ should handle AES decryption with invalid format (6 ms)

  ● PQCDataEncryptionService › Data Encryption with Kyber-768 › should encrypt data successfully with ML-KEM-768

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Data Encryption with Kyber-768 › should decrypt ML-KEM-768 encrypted data successfully

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Data Encryption with Kyber-768 › should handle large data payloads with ML-KEM-768

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Data Encryption with AES-256-GCM Fallback › should encrypt and decrypt data with AES-256-GCM

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Data Encryption with AES-256-GCM Fallback › should handle AES encryption with custom key ID

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Key Management › should generate unique encryption keys for different operations

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Key Management › should handle key rotation gracefully

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Key Management › should validate encrypted data integrity

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Performance and Monitoring › should complete ML-KEM-768 encryption within performance threshold

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Performance and Monitoring › should complete AES-256-GCM encryption within performance threshold

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Performance and Monitoring › should complete decryption within performance threshold

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Error Handling › should handle malformed encrypted data gracefully

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Error Handling › should handle empty data gracefully

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Error Handling › should handle encryption failures gracefully

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Error Handling › should handle AES decryption with invalid format

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

FAIL src/services/__tests__/fallback.test.ts
  Fallback Behavior Validation
    PQC Service Failure Scenarios
      ✕ should fallback to RSA when PQC service is completely unavailable (12 ms)
      ✕ should fallback to RSA when PQC returns unsuccessful result (5 ms)
      ✕ should fallback to RSA when PQC times out (113 ms)
    Circuit Breaker Integration
      ✕ should use circuit breaker to prevent cascading failures (5 ms)
      ✓ should record success when PQC works correctly (4 ms)
      ✓ should record failure when PQC fails (4 ms)
    Service Recovery Scenarios
      ✓ should switch back to PQC when service recovers (10 ms)
    Health Status Monitoring
      ✓ should accurately report service health status (4 ms)
      ✓ should indicate fallback is active when PQC is unhealthy (4 ms)
    Zero Downtime Validation
      ✓ should maintain service availability during PQC outages (6 ms)

  ● Fallback Behavior Validation › PQC Service Failure Scenarios › should fallback to RSA when PQC service is completely unavailable

    expect(received).toBe(expected) // Object.is equality

    Expected: "PQC service unavailable"
    Received: "PQC_SERVICE_UNAVAILABLE"

      80 |       expect(result.algorithm).toBe('RSA-2048');
      81 |       expect(result.fallbackUsed).toBe(true);
    > 82 |       expect(result.metadata.fallbackReason).toBe('PQC service unavailable');
         |                                              ^
      83 |       expect(classicalService.encryptRSA).toHaveBeenCalledWith(testData, publicKey);
      84 |     });
      85 |

      at Object.<anonymous> (src/services/__tests__/fallback.test.ts:82:46)

  ● Fallback Behavior Validation › PQC Service Failure Scenarios › should fallback to RSA when PQC returns unsuccessful result

    expect(received).toBe(expected) // Object.is equality

    Expected: "PQC_ENCRYPTION_FAILED"
    Received: undefined

      112 |       expect(result.algorithm).toBe('RSA-2048');
      113 |       expect(result.fallbackUsed).toBe(true);
    > 114 |       expect(result.metadata.originalError).toBe('PQC_ENCRYPTION_FAILED');
          |                                             ^
      115 |     });
      116 |
      117 |     it('should fallback to RSA when PQC times out', async () => {

      at Object.<anonymous> (src/services/__tests__/fallback.test.ts:114:45)

  ● Fallback Behavior Validation › PQC Service Failure Scenarios › should fallback to RSA when PQC times out

    expect(received).toBe(expected) // Object.is equality

    Expected: "Operation timed out"
    Received: "PQC_SERVICE_UNAVAILABLE"

      144 |       expect(result.algorithm).toBe('RSA-2048');
      145 |       expect(result.fallbackUsed).toBe(true);
    > 146 |       expect(result.metadata.fallbackReason).toBe('Operation timed out');
          |                                              ^
      147 |     });
      148 |   });
      149 |

      at Object.<anonymous> (src/services/__tests__/fallback.test.ts:146:46)

  ● Fallback Behavior Validation › Circuit Breaker Integration › should use circuit breaker to prevent cascading failures

    expect(received).toBe(expected) // Object.is equality

    Expected: "Circuit breaker open"
    Received: "PQC_SERVICE_UNAVAILABLE"

      164 |       expect(result.algorithm).toBe('RSA-2048');
      165 |       expect(result.fallbackUsed).toBe(true);
    > 166 |       expect(result.metadata.fallbackReason).toBe('Circuit breaker open');
          |                                              ^
      167 |       expect(pqcService.encryptData).not.toHaveBeenCalled();
      168 |     });
      169 |

      at Object.<anonymous> (src/services/__tests__/fallback.test.ts:166:46)

FAIL src/services/__tests__/nist-vectors.test.ts
  NIST Test Vector Compliance
    ML-KEM-768 NIST Compliance
      ✕ should generate keys with correct size (1184 bytes public, 2400 bytes private) (8 ms)
      ✕ should produce different ciphertexts for same plaintext (randomness test) (5 ms)
      ✕ should encrypt and decrypt maintaining data integrity (4 ms)
    ML-DSA-65 NIST Compliance
      ✕ should generate signatures with correct algorithm (4 ms)
      ✕ should produce different signatures for same data (randomness test) (4 ms)
      ✕ should sign and verify maintaining authenticity (3 ms)
      ✕ should reject tampered signatures (4 ms)
    Performance Benchmarks
      ✕ should meet NIST performance requirements (4 ms)

  ● NIST Test Vector Compliance › ML-KEM-768 NIST Compliance › should generate keys with correct size (1184 bytes public, 2400 bytes private)

    Nest can't resolve dependencies of the PQCDataValidationService (ConfigService, ?, EnhancedErrorBoundaryService, QuantumSafeCryptoIdentityService). Please make sure that the argument PQCBridgeService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCBridgeService is a provider, is it part of the current RootTestModule?
    - If PQCBridgeService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCBridgeService */ ]
      })

      63 |     };
      64 |
    > 65 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      66 |       providers: [
      67 |         PQCDataEncryptionService,
      68 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 4)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (src/services/__tests__/nist-vectors.test.ts:65:35)

  ● NIST Test Vector Compliance › ML-KEM-768 NIST Compliance › should produce different ciphertexts for same plaintext (randomness test)

    Nest can't resolve dependencies of the PQCDataValidationService (ConfigService, ?, EnhancedErrorBoundaryService, QuantumSafeCryptoIdentityService). Please make sure that the argument PQCBridgeService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCBridgeService is a provider, is it part of the current RootTestModule?
    - If PQCBridgeService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCBridgeService */ ]
      })

      63 |     };
      64 |
    > 65 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      66 |       providers: [
      67 |         PQCDataEncryptionService,
      68 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 4)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (src/services/__tests__/nist-vectors.test.ts:65:35)

  ● NIST Test Vector Compliance › ML-KEM-768 NIST Compliance › should encrypt and decrypt maintaining data integrity

    Nest can't resolve dependencies of the PQCDataValidationService (ConfigService, ?, EnhancedErrorBoundaryService, QuantumSafeCryptoIdentityService). Please make sure that the argument PQCBridgeService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCBridgeService is a provider, is it part of the current RootTestModule?
    - If PQCBridgeService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCBridgeService */ ]
      })

      63 |     };
      64 |
    > 65 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      66 |       providers: [
      67 |         PQCDataEncryptionService,
      68 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 4)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (src/services/__tests__/nist-vectors.test.ts:65:35)

  ● NIST Test Vector Compliance › ML-DSA-65 NIST Compliance › should generate signatures with correct algorithm

    Nest can't resolve dependencies of the PQCDataValidationService (ConfigService, ?, EnhancedErrorBoundaryService, QuantumSafeCryptoIdentityService). Please make sure that the argument PQCBridgeService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCBridgeService is a provider, is it part of the current RootTestModule?
    - If PQCBridgeService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCBridgeService */ ]
      })

      63 |     };
      64 |
    > 65 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      66 |       providers: [
      67 |         PQCDataEncryptionService,
      68 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 4)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (src/services/__tests__/nist-vectors.test.ts:65:35)

  ● NIST Test Vector Compliance › ML-DSA-65 NIST Compliance › should produce different signatures for same data (randomness test)

    Nest can't resolve dependencies of the PQCDataValidationService (ConfigService, ?, EnhancedErrorBoundaryService, QuantumSafeCryptoIdentityService). Please make sure that the argument PQCBridgeService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCBridgeService is a provider, is it part of the current RootTestModule?
    - If PQCBridgeService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCBridgeService */ ]
      })

      63 |     };
      64 |
    > 65 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      66 |       providers: [
      67 |         PQCDataEncryptionService,
      68 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 4)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (src/services/__tests__/nist-vectors.test.ts:65:35)

  ● NIST Test Vector Compliance › ML-DSA-65 NIST Compliance › should sign and verify maintaining authenticity

    Nest can't resolve dependencies of the PQCDataValidationService (ConfigService, ?, EnhancedErrorBoundaryService, QuantumSafeCryptoIdentityService). Please make sure that the argument PQCBridgeService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCBridgeService is a provider, is it part of the current RootTestModule?
    - If PQCBridgeService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCBridgeService */ ]
      })

      63 |     };
      64 |
    > 65 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      66 |       providers: [
      67 |         PQCDataEncryptionService,
      68 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 4)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (src/services/__tests__/nist-vectors.test.ts:65:35)

  ● NIST Test Vector Compliance › ML-DSA-65 NIST Compliance › should reject tampered signatures

    Nest can't resolve dependencies of the PQCDataValidationService (ConfigService, ?, EnhancedErrorBoundaryService, QuantumSafeCryptoIdentityService). Please make sure that the argument PQCBridgeService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCBridgeService is a provider, is it part of the current RootTestModule?
    - If PQCBridgeService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCBridgeService */ ]
      })

      63 |     };
      64 |
    > 65 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      66 |       providers: [
      67 |         PQCDataEncryptionService,
      68 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 4)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (src/services/__tests__/nist-vectors.test.ts:65:35)

  ● NIST Test Vector Compliance › Performance Benchmarks › should meet NIST performance requirements

    Nest can't resolve dependencies of the PQCDataValidationService (ConfigService, ?, EnhancedErrorBoundaryService, QuantumSafeCryptoIdentityService). Please make sure that the argument PQCBridgeService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCBridgeService is a provider, is it part of the current RootTestModule?
    - If PQCBridgeService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCBridgeService */ ]
      })

      63 |     };
      64 |
    > 65 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      66 |       providers: [
      67 |         PQCDataEncryptionService,
      68 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 4)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (src/services/__tests__/nist-vectors.test.ts:65:35)

FAIL test/integration/pqc/cross-service.test.ts
  PQC Cross-Service Integration
    Encryption and Validation Integration
      ✕ should integrate PQC encryption with data validation using real cryptographic operations (20 ms)
      ✕ should handle cross-service data flow with signature verification (10 ms)
      ✕ should maintain data integrity across multiple service operations (8 ms)
    Performance and Monitoring Integration
      ✕ should track performance metrics across service boundaries (8 ms)
      ✕ should handle concurrent cross-service operations efficiently (8 ms)
    Error Handling and Resilience
      ✕ should handle service integration failures gracefully (9 ms)
      ✕ should maintain consistency during partial service failures (9 ms)

  ● PQC Cross-Service Integration › Encryption and Validation Integration › should integrate PQC encryption with data validation using real cryptographic operations

    Nest can't resolve dependencies of the JwtService (ConfigService, ?, PQCFeatureFlagsService, PQCMonitoringService). Please make sure that the argument SecretsService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If SecretsService is a provider, is it part of the current RootTestModule?
    - If SecretsService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing SecretsService */ ]
      })

      26 |
      27 |   beforeEach(async () => {
    > 28 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      29 |       providers: [
      30 |         PQCDataEncryptionService,
      31 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 11)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/cross-service.test.ts:28:35)

  ● PQC Cross-Service Integration › Encryption and Validation Integration › should handle cross-service data flow with signature verification

    Nest can't resolve dependencies of the JwtService (ConfigService, ?, PQCFeatureFlagsService, PQCMonitoringService). Please make sure that the argument SecretsService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If SecretsService is a provider, is it part of the current RootTestModule?
    - If SecretsService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing SecretsService */ ]
      })

      26 |
      27 |   beforeEach(async () => {
    > 28 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      29 |       providers: [
      30 |         PQCDataEncryptionService,
      31 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 11)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/cross-service.test.ts:28:35)

  ● PQC Cross-Service Integration › Encryption and Validation Integration › should maintain data integrity across multiple service operations

    Nest can't resolve dependencies of the JwtService (ConfigService, ?, PQCFeatureFlagsService, PQCMonitoringService). Please make sure that the argument SecretsService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If SecretsService is a provider, is it part of the current RootTestModule?
    - If SecretsService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing SecretsService */ ]
      })

      26 |
      27 |   beforeEach(async () => {
    > 28 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      29 |       providers: [
      30 |         PQCDataEncryptionService,
      31 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 11)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/cross-service.test.ts:28:35)

  ● PQC Cross-Service Integration › Performance and Monitoring Integration › should track performance metrics across service boundaries

    Nest can't resolve dependencies of the JwtService (ConfigService, ?, PQCFeatureFlagsService, PQCMonitoringService). Please make sure that the argument SecretsService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If SecretsService is a provider, is it part of the current RootTestModule?
    - If SecretsService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing SecretsService */ ]
      })

      26 |
      27 |   beforeEach(async () => {
    > 28 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      29 |       providers: [
      30 |         PQCDataEncryptionService,
      31 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 11)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/cross-service.test.ts:28:35)

  ● PQC Cross-Service Integration › Performance and Monitoring Integration › should handle concurrent cross-service operations efficiently

    Nest can't resolve dependencies of the JwtService (ConfigService, ?, PQCFeatureFlagsService, PQCMonitoringService). Please make sure that the argument SecretsService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If SecretsService is a provider, is it part of the current RootTestModule?
    - If SecretsService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing SecretsService */ ]
      })

      26 |
      27 |   beforeEach(async () => {
    > 28 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      29 |       providers: [
      30 |         PQCDataEncryptionService,
      31 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 11)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/cross-service.test.ts:28:35)

  ● PQC Cross-Service Integration › Error Handling and Resilience › should handle service integration failures gracefully

    Nest can't resolve dependencies of the JwtService (ConfigService, ?, PQCFeatureFlagsService, PQCMonitoringService). Please make sure that the argument SecretsService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If SecretsService is a provider, is it part of the current RootTestModule?
    - If SecretsService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing SecretsService */ ]
      })

      26 |
      27 |   beforeEach(async () => {
    > 28 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      29 |       providers: [
      30 |         PQCDataEncryptionService,
      31 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 11)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/cross-service.test.ts:28:35)

  ● PQC Cross-Service Integration › Error Handling and Resilience › should maintain consistency during partial service failures

    Nest can't resolve dependencies of the JwtService (ConfigService, ?, PQCFeatureFlagsService, PQCMonitoringService). Please make sure that the argument SecretsService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If SecretsService is a provider, is it part of the current RootTestModule?
    - If SecretsService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing SecretsService */ ]
      })

      26 |
      27 |   beforeEach(async () => {
    > 28 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      29 |       providers: [
      30 |         PQCDataEncryptionService,
      31 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 11)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/cross-service.test.ts:28:35)

  console.log
    Register response status: 201

      at Object.<anonymous> (src/auth/__tests__/device.integration.spec.ts:69:13)

  console.log
    Register response body: {
      "message": "User registered successfully",
      "userId": "6867fa98c57d2e4d3c048e27",
      "email": "devicetest@example.com"
    }

      at Object.<anonymous> (src/auth/__tests__/device.integration.spec.ts:70:13)

[31m[Nest] 70473  - [39m07/04/2025, 4:00:25 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation handshake. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:25 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation handshake failed after 93ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:25 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:25 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mUnsupported fallback operation for real RSA: handshake[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:25 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation handshake: Unsupported fallback operation: handshake[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:25 PM [31m  ERROR[39m [38;5;3m[PQCService] [39m[31m❌ PQC handshake failed for user 6867fa98c57d2e4d3c048e27:[39m
Critical cryptographic fallback failure: Unsupported fallback operation: handshake
[31m[Nest] 70473  - [39m07/04/2025, 4:00:25 PM [31m  ERROR[39m [38;5;3m[AuthService] [39m[31mPQC handshake failed for user 6867fa98c57d2e4d3c048e27:[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:25 PM [31m  ERROR[39m [38;5;3m[AuthService] [39m[31mError: Critical cryptographic fallback failure: Unsupported fallback operation: handshake[39m
  console.log
    Login response status: 200

      at Object.<anonymous> (src/auth/__tests__/device.integration.spec.ts:80:13)

  console.log
    Login response body: {
      "status": "success",
      "message": "Logged in successfully",
      "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODY3ZmE5OGM1N2QyZTRkM2MwNDhlMjciLCJlbWFpbCI6ImRldmljZXRlc3RAZXhhbXBsZS5jb20iLCJpYXQiOjE3NTE2NDQ4MjUsImV4cCI6MTc1MTY0NTcyNX0.we3-LPcXzsqr5Cb1wVqeG2xaV8QRyxWahrrls_MI_9s",
      "user": {
        "id": "6867fa98c57d2e4d3c048e27",
        "email": "devicetest@example.com"
      }
    }

      at Object.<anonymous> (src/auth/__tests__/device.integration.spec.ts:81:13)

[31m[Nest] 70473  - [39m07/04/2025, 4:00:25 PM [31m  ERROR[39m [38;5;3m[JwtAuthGuard] [39m[31mJWT Auth Guard - Authorization header is missing[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:25 PM [31m  ERROR[39m [38;5;3m[JwtAuthGuard] [39m[31mJWT Auth Guard - Authorization header is missing[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:25 PM [31m  ERROR[39m [38;5;3m[JwtAuthGuard] [39m[31mJWT Auth Guard - Authorization header is missing[39m
PASS src/auth/__tests__/device.integration.spec.ts
  Device Trust Integration Tests
    POST /auth/device/register
      ✓ should register a trusted device successfully (188 ms)
      ✓ should reject registration without authentication (14 ms)
      ✓ should reject registration with invalid device data (10 ms)
      ✓ should detect and reject spoofing attempts (250 ms)
    POST /auth/device/verify
      ✓ should verify device with correct verification code (15 ms)
      ✓ should reject verification with incorrect code (13 ms)
      ✓ should reject verification without authentication (16 ms)
    POST /auth/device/check-trust
      ✓ should check device trust status (86 ms)
      ✓ should reject trust check without authentication (12 ms)
      ✓ should reject trust check with invalid fingerprint data (9 ms)
    Device Trust Security Tests
      ✓ should handle concurrent device registration attempts (584 ms)
      ✓ should properly sanitize device fingerprints in logs (167 ms)

PASS src/auth/auth.service.spec.ts
  AuthService - Refresh Token
    refreshToken
      ✓ should successfully refresh token with valid refresh token (443 ms)
      ✓ should throw UnauthorizedException for invalid refresh token (140 ms)
      ✓ should throw UnauthorizedException when user not found (113 ms)
      ✓ should throw UnauthorizedException when refresh token hash does not match (318 ms)
      ✓ should throw UnauthorizedException when user has no refresh token hash (112 ms)

  console.log
    === Live PQC UID Signature Lifecycle Test ===

      at Object.<anonymous> (src/services/__tests__/uid-signature-lifecycle.test.ts:82:13)

  console.log
    Generated signing user ID: crypto_e536b9583c100794

      at Object.<anonymous> (src/services/__tests__/uid-signature-lifecycle.test.ts:94:13)

  console.log
    Generated verification user ID: crypto_e536b9583c100794

      at Object.<anonymous> (src/services/__tests__/uid-signature-lifecycle.test.ts:95:13)

  console.log
    Live PQC signature generated: classical:e7edc60eace17c9446d0980f27d46bc9a6d94d92...

      at Object.<anonymous> (src/services/__tests__/uid-signature-lifecycle.test.ts:106:13)

  console.log
    Signature metadata: undefined

      at Object.<anonymous> (src/services/__tests__/uid-signature-lifecycle.test.ts:107:13)

  console.log
    Live PQC verification result: true

      at Object.<anonymous> (src/services/__tests__/uid-signature-lifecycle.test.ts:113:13)

  console.log
    Verification errors: []

      at Object.<anonymous> (src/services/__tests__/uid-signature-lifecycle.test.ts:114:13)

  console.log
    Verification warnings: []

      at Object.<anonymous> (src/services/__tests__/uid-signature-lifecycle.test.ts:115:13)

  console.log
    === Live PQC Anonymous UID Test ===

      at Object.<anonymous> (src/services/__tests__/uid-signature-lifecycle.test.ts:133:13)

  console.log
    Anonymous live PQC signature generated: classical:45a22dc0c1eca17b4ed0074a060cd3c0336140fe...

      at Object.<anonymous> (src/services/__tests__/uid-signature-lifecycle.test.ts:139:13)

  console.log
    Anonymous live PQC verification result: true

      at Object.<anonymous> (src/services/__tests__/uid-signature-lifecycle.test.ts:143:13)

  console.log
    Anonymous verification errors: []

      at Object.<anonymous> (src/services/__tests__/uid-signature-lifecycle.test.ts:144:13)

PASS src/services/__tests__/uid-signature-lifecycle.test.ts
  UID Signature Lifecycle - Live PQC Operations
    ✓ should use consistent user ID for signing and verification with live PQC (9 ms)
    ✓ should handle anonymous user ID consistently with live PQC (4 ms)

  console.log
    MockUserModel findOne() called

      at Function.testing_1.Test.createTestingModule.providers.useValue.MockUserModel.findOne (src/auth/auth.spec.ts:95:23)

  console.log
    MockUserModel constructor called with: {
      email: 'new@example.com',
      password: '$2a$10$mOKJIci.ex1D7koEiEjzzeq.qJkMMiJzBvGMgEvLsdQECPA.HGv4i'
    }

      at new MockUserModel (src/auth/auth.spec.ts:78:23)

  console.log
    MockUserModel save() called, this: MockUserModel {
      _id: '507f1f77bcf86cd799439011',
      email: 'new@example.com',
      password: '$2a$10$mOKJIci.ex1D7koEiEjzzeq.qJkMMiJzBvGMgEvLsdQECPA.HGv4i',
      failedLoginAttempts: 0,
      lockUntil: null,
      lastLoginAt: 2025-07-04T16:00:31.256Z,
      refreshTokenHash: null,
      save: [Function (anonymous)]
    }

      at MockUserModel.save (src/auth/auth.spec.ts:82:25)

  console.log
    MockUserModel save() returning: {
      _id: { toString: [Function: toString] },
      email: 'new@example.com',
      password: '$2a$10$mOKJIci.ex1D7koEiEjzzeq.qJkMMiJzBvGMgEvLsdQECPA.HGv4i',
      failedLoginAttempts: 0,
      lockUntil: null,
      lastLoginAt: 2025-07-04T16:00:31.256Z,
      refreshTokenHash: null,
      save: [Function (anonymous)]
    }

      at MockUserModel.save (src/auth/auth.spec.ts:89:25)

[31m[Nest] 70473  - [39m07/04/2025, 4:00:31 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation handshake. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:31 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation handshake failed after 99ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:31 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:31 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mUnsupported fallback operation for real RSA: handshake[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:31 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation handshake: Unsupported fallback operation: handshake[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:31 PM [31m  ERROR[39m [38;5;3m[PQCService] [39m[31m❌ PQC handshake failed for user 507f1f77bcf86cd799439011:[39m
Critical cryptographic fallback failure: Unsupported fallback operation: handshake
[31m[Nest] 70473  - [39m07/04/2025, 4:00:31 PM [31m  ERROR[39m [38;5;3m[AuthService] [39m[31mPQC handshake failed for user 507f1f77bcf86cd799439011:[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:31 PM [31m  ERROR[39m [38;5;3m[AuthService] [39m[31mError: Critical cryptographic fallback failure: Unsupported fallback operation: handshake[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:32 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mPython PQC script exited with code 2 for operation handshake. Stderr: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:32 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mLive PQC operation handshake failed after 111ms[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:32 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mError: PQC service execution failed. Error: /home/ubuntu/.pyenv/versions/3.12.8/bin/python3: can't open file '/home/ubuntu/repos/quantum-safe-privacy-portal/src/portal/portal-backend/mock-qynauth/src/python_app/pqc_service_bridge.py': [Errno 2] No such file or directory
[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:32 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mUnsupported fallback operation for real RSA: handshake[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:32 PM [31m  ERROR[39m [38;5;3m[PQCBridgeService] [39m[31mReal RSA fallback failed for operation handshake: Unsupported fallback operation: handshake[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:32 PM [31m  ERROR[39m [38;5;3m[PQCService] [39m[31m❌ PQC handshake failed for user 507f1f77bcf86cd799439011:[39m
Critical cryptographic fallback failure: Unsupported fallback operation: handshake
[31m[Nest] 70473  - [39m07/04/2025, 4:00:32 PM [31m  ERROR[39m [38;5;3m[AuthService] [39m[31mPQC handshake failed for user 507f1f77bcf86cd799439011:[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:32 PM [31m  ERROR[39m [38;5;3m[AuthService] [39m[31mError: Critical cryptographic fallback failure: Unsupported fallback operation: handshake[39m
PASS src/auth/auth.spec.ts
  AuthService
    ✓ should be defined (24 ms)
    register
      ✓ should register a new user successfully (129 ms)
      ✓ should throw ConflictException if email already exists (30 ms)
    login
      ✓ should login user with correct credentials (327 ms)
      ✓ should login user with refreshToken regardless of rememberMe flag (323 ms)
      ✓ should throw UnauthorizedException for invalid credentials (12 ms)
      ✓ should throw ForbiddenException for locked account (11 ms)

[31m[Nest] 70473  - [39m07/04/2025, 4:00:33 PM [31m  ERROR[39m [38;5;3m[JwtService] [39m[31mJWT secrets are not initialized. Cannot generate SSO tokens.[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:33 PM [31m  ERROR[39m [38;5;3m[SsoService] [39m[31mSAML verification failed[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:33 PM [31m  ERROR[39m [38;5;3m[SsoService] [39m[31mInternalServerErrorException: JWT service not fully initialized.[39m
PASS src/auth/sso.service.spec.ts
  SsoService
    initializeSamlStrategy
      ✓ should successfully initialize SAML strategy with valid configuration (43 ms)
      ✓ should handle configuration errors gracefully (20 ms)
    extractUserFromProfile
      ✓ should extract user data from SAML profile with standard attributes (25 ms)
      ✓ should extract user data from profile with Microsoft claims (18 ms)
      ✓ should assign default role when no roles are found (18 ms)
    validateSamlUser
      ✓ should validate user with valid nameID and email (18 ms)
      ✓ should reject user with missing nameID (19 ms)
      ✓ should reject user with missing email (50 ms)
      ✓ should reject user with invalid email format (18 ms)
    generateSamlRequest
      ✓ should handle SAML request generation (18 ms)
    processSamlResponse
      ✓ should handle SAML response processing (18 ms)
    getMetadata
      ✓ should handle metadata generation (18 ms)
    verifyCallback
      ✓ should handle SAML callback verification (27 ms)
      ✓ should handle invalid profile verification (19 ms)
    cleanup operations
      ✓ should clean up expired requests (25 ms)

[31m[Nest] 70473  - [39m07/04/2025, 4:00:34 PM [31m  ERROR[39m [38;5;3m[MFAService] [39m[31mMFA setup failed for user 60d5ec49f1a23c001c8a4d7d:[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:34 PM [31m  ERROR[39m [38;5;3m[MFAService] [39m[31mBadRequestException: User not found[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:34 PM [31m  ERROR[39m [38;5;3m[MFAService] [39m[31mMFA setup failed for user 60d5ec49f1a23c001c8a4d7d:[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:34 PM [31m  ERROR[39m [38;5;3m[MFAService] [39m[31mBadRequestException: MFA is already enabled for this user[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:34 PM [31m  ERROR[39m [38;5;3m[MFAService] [39m[31mFailed to disable MFA for user 60d5ec49f1a23c001c8a4d7d:[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:34 PM [31m  ERROR[39m [38;5;3m[MFAService] [39m[31mBadRequestException: User not found[39m
PASS src/auth/mfa.service.spec.ts
  MFAService
    ✓ should be defined (44 ms)
    setupMFA
      ✓ should setup MFA for a user successfully (20 ms)
      ✓ should throw BadRequestException if user not found (32 ms)
      ✓ should throw BadRequestException if MFA already enabled (18 ms)
    verifyMFA
      ✓ should verify TOTP code successfully (18 ms)
      ✓ should verify backup code successfully (23 ms)
      ✓ should fail verification for invalid code (18 ms)
      ✓ should enable MFA when enableMFA flag is true (18 ms)
      ✓ should throw UnauthorizedException if user not found (17 ms)
      ✓ should throw UnauthorizedException if MFA not set up (17 ms)
    isMFAEnabled
      ✓ should return true if MFA is enabled (58 ms)
      ✓ should return false if MFA is not enabled (17 ms)
      ✓ should return false if user not found (17 ms)
    disableMFA
      ✓ should disable MFA successfully (17 ms)
      ✓ should throw BadRequestException if user not found (17 ms)

PASS test/api/pqc-performance.test.ts
  PQC Performance API
    Performance Stats API
      ✓ should get performance statistics (23 ms)
      ✓ should get health status (16 ms)

PASS src/auth/__tests__/device.service.spec.ts
  DeviceService
    generateDeviceFingerprint
      ✓ should generate consistent fingerprint for same device info (35 ms)
      ✓ should generate different fingerprints for different device info (20 ms)
    generateDeviceId
      ✓ should generate unique device IDs (18 ms)
    registerTrustedDevice
      ✓ should register a new trusted device successfully (19 ms)
    validateDeviceTrust
      ✓ should return trusted=true for valid trusted device (23 ms)
      ✓ should return trusted=false for unknown device (18 ms)
      ✓ should return trusted=false for expired device (older than 30 days) (18 ms)
    detectSpoofingAttempt
      ✓ should detect potential spoofing when same fingerprint used within 5 seconds (17 ms)
      ✓ should not detect spoofing for legitimate different devices (18 ms)
      ✓ should return false when user has no trusted devices (57 ms)

[31m[Nest] 70473  - [39m07/04/2025, 4:00:37 PM [31m  ERROR[39m [38;5;3m[RollbackSystemService] [39m[31mROLLBACK TRIGGERED for experiment pqc_kyber_rollout_v1[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:37 PM [31m  ERROR[39m [38;5;3m[RollbackSystemService] [39m[31mTrigger: error_rate exceeded 0.05[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:37 PM [31m  ERROR[39m [38;5;3m[RollbackSystemService] [39m[31mROLLBACK NOTIFICATION: {"experimentId":"pqc_kyber_rollout_v1","triggerMetric":"error_rate","thresholdValue":0.05,"timestamp":"2025-07-04T16:00:37.436Z","severity":"CRITICAL"}[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:37 PM [31m  ERROR[39m [38;5;3m[RollbackSystemService] [39m[31mROLLBACK TRIGGERED for experiment pqc_kyber_rollout_v1[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:37 PM [31m  ERROR[39m [38;5;3m[RollbackSystemService] [39m[31mTrigger: response_time_ms exceeded 2000[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:37 PM [31m  ERROR[39m [38;5;3m[RollbackSystemService] [39m[31mROLLBACK NOTIFICATION: {"experimentId":"pqc_kyber_rollout_v1","triggerMetric":"response_time_ms","thresholdValue":2000,"timestamp":"2025-07-04T16:00:37.446Z","severity":"CRITICAL"}[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:37 PM [31m  ERROR[39m [38;5;3m[RollbackSystemService] [39m[31mROLLBACK TRIGGERED for experiment pqc_kyber_rollout_v1[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:37 PM [31m  ERROR[39m [38;5;3m[RollbackSystemService] [39m[31mTrigger: error_rate exceeded 0.05[39m
[31m[Nest] 70473  - [39m07/04/2025, 4:00:37 PM [31m  ERROR[39m [38;5;3m[RollbackSystemService] [39m[31mROLLBACK NOTIFICATION: {"experimentId":"pqc_kyber_rollout_v1","triggerMetric":"error_rate","thresholdValue":0.05,"timestamp":"2025-07-04T16:00:37.477Z","severity":"CRITICAL"}[39m
PASS src/pqc/rollback-system.service.spec.ts
  RollbackSystemService
    ✓ should be defined (14 ms)
    monitorExperiments
      ✓ should monitor running experiments (9 ms)
      ✓ should not monitor completed experiments (7 ms)
    rollback triggers
      ✓ should trigger rollback when error rate exceeds threshold (10 ms)
      ✓ should trigger rollback when response time exceeds threshold (8 ms)
      ✓ should not trigger rollback with insufficient sample size (7 ms)
      ✓ should not trigger rollback when metrics are within thresholds (8 ms)
    rollback execution
      ✓ should update experiment status to failed on rollback (14 ms)
    custom triggers
      ✓ should allow adding custom rollback triggers (6 ms)
      ✓ should return all rollback triggers (6 ms)

PASS src/jwt/jwt.spec.ts
  JwtService
    ✓ should be defined (19 ms)

PASS src/auth/auth.middleware.spec.ts
  AuthMiddleware
    use
      ✓ should call next() with valid JWT token (16 ms)
      ✓ should return 401 when authorization header is missing (22 ms)
      ✓ should return 401 when authorization header format is invalid (6 ms)
      ✓ should return 401 when JWT token is missing (7 ms)
      ✓ should return 401 when JWT token is invalid (6 ms)
      ✓ should return 401 when JWT verification throws error (6 ms)

PASS src/pqc/ab-testing.service.spec.ts
  ABTestingService
    ✓ should be defined (11 ms)
    assignUserToVariant
      ✓ should return control for non-existent experiment (7 ms)
      ✓ should consistently assign same user to same variant (6 ms)
      ✓ should assign users to control and treatment based on percentages (7 ms)
    shouldUsePQC
      ✓ should return false when no PQC experiments are running (7 ms)
      ✓ should return true for users in treatment group of PQC experiments (30 ms)
    experiment management
      ✓ should get experiment by ID (5 ms)
      ✓ should return undefined for non-existent experiment (5 ms)
      ✓ should update experiment status (5 ms)
      ✓ should get all experiments (5 ms)

PASS src/pqc/metrics-collector.service.spec.ts
  MetricsCollectorService
    ✓ should be defined (12 ms)
    recordEvent
      ✓ should record metric events (9 ms)
      ✓ should aggregate multiple events correctly (6 ms)
      ✓ should separate control and treatment metrics (7 ms)
      ✓ should hash user IDs for privacy (6 ms)
    data retention
      ✓ should clear old events based on retention policy (5 ms)
      ✓ should keep recent events within retention period (5 ms)
    getRecentEvents
      ✓ should return limited number of recent events (7 ms)

PASS src/services/__tests__/hybrid-crypto.service.test.ts
  HybridCryptoService
    ✓ should be defined (11 ms)
    encryptWithFallback
      ✓ should use PQC encryption when available (10 ms)
      ✓ should fallback to RSA when PQC fails (9 ms)
      ✓ should fallback to RSA when PQC returns unsuccessful result (8 ms)
    decryptWithFallback
      ✓ should decrypt PQC-encrypted data (33 ms)
      ✓ should decrypt RSA-encrypted data (7 ms)
      ✓ should throw error for unknown algorithm (20 ms)
    generateKeyPairWithFallback
      ✓ should fallback to RSA key generation when PQC is not available (6 ms)
    getHealthStatus
      ✓ should return health status for both services (6 ms)
      ✓ should indicate fallback is active when PQC is unhealthy (5 ms)

[31m[Nest] 70473  - [39m07/04/2025, 4:00:42 PM [31m  ERROR[39m [38;5;3m[DataMigrationService] [39m[31mMigration failed for user non-existent-user: User not found: non-existent-user[39m
PASS src/services/__tests__/data-migration.service.test.ts
  DataMigrationService
    ✓ should be defined (15 ms)
    migrateToPQC
      ✓ should return zero counts when migration is disabled (8 ms)
      ✓ should migrate users and consents when enabled (11 ms)
    migrateUserData
      ✓ should migrate user from placeholder to PQC (7 ms)
      ✓ should skip migration for already migrated users (5 ms)
      ✓ should throw error for non-existent user (6 ms)
    rollbackPQC
      ✓ should rollback users and consents (6 ms)
    getMigrationStatus
      ✓ should return migration progress statistics (7 ms)

PASS src/secrets/secrets.spec.ts
  SecretsService
    ✓ should be defined (8 ms)
    getSecret
      ✓ should return dummy secret when SKIP_SECRETS_MANAGER is true (7 ms)
      ✓ should retrieve real secret when SKIP_SECRETS_MANAGER is false (5 ms)
      ✓ should handle different secret IDs (6 ms)
      ✓ should cache secrets for performance (6 ms)

  console.log
    request type: function

      at Object.<anonymous> (test/api/supertest-debug.test.ts:15:13)

  console.log
    request: [Function (anonymous)] {
      Test: [class Test extends Request],
      agent: [Function: TestAgent]
    }

      at Object.<anonymous> (test/api/supertest-debug.test.ts:16:13)

PASS test/api/supertest-debug.test.ts
  Supertest Debug
    ✓ should verify supertest works (23 ms)

------------------------------------------|---------|----------|---------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
File                                      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                                                                                                                                                                                                                                          
------------------------------------------|---------|----------|---------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
All files                                 |   56.48 |    50.43 |   47.48 |   56.48 |                                                                                                                                                                                                                                                            
 src                                      |       0 |        0 |       0 |       0 |                                                                                                                                                                                                                                                            
  app.module.ts                           |       0 |        0 |       0 |       0 | 1-86                                                                                                                                                                                                                                                       
  main.ts                                 |       0 |        0 |       0 |       0 | 1-230                                                                                                                                                                                                                                                      
 src/auth                                 |   65.52 |    51.97 |   58.82 |   65.52 |                                                                                                                                                                                                                                                            
  auth.controller.ts                      |   72.85 |    32.14 |      40 |   72.85 | 236-237,252-253,266-271,282-323,335-341,385-389,399-410,420-431,438-445,454-460,470-487,498-538,545-551,554-555,567-568,617-618,638-639                                                                                                                    
  auth.middleware.ts                      |   77.87 |       75 |      60 |   77.87 | 69-79,88-94,97-103                                                                                                                                                                                                                                         
  auth.module.ts                          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
  auth.service.ts                         |   74.66 |    36.48 |    92.3 |   74.66 | 64-65,79-80,86-114,132-156,158-159,194-196,199-202,239-240,243-244,262-264,285-286,303-310,314,318-319,329-330,337-338,352-357,360-361,364,371-372,393-394,397-399,404-412,470-473,476-479,485-490,544-552,556-557,568-569,573-574,579-580,586-587,591-592 
  device.controller.ts                    |   26.51 |       20 |      25 |   26.51 | 22-60,67-96,104-131                                                                                                                                                                                                                                        
  device.service.ts                       |   89.88 |    63.63 |     100 |   89.88 | 54-55,113-115,124-131,145-147,153-154                                                                                                                                                                                                                      
  enhanced-auth.service.ts                |   15.87 |       20 |    4.16 |   15.87 | 47-56,59-69,72-125,128-220,223-233,236-262,265-294,297-317,320-417,423-455,458-503,506-514,517-523,526-533,536-547,550-554,557-558,561-562,565-566,569-578,581-582,585-586,589-591                                                                         
  jwt-auth.guard.ts                       |   89.55 |    72.72 |     100 |   89.55 | 43-45,57-60                                                                                                                                                                                                                                                
  mfa.service.ts                          |   90.37 |    72.97 |     100 |   90.37 | 102-103,106-107,124-130,147-148,181-189,260-261,265-266                                                                                                                                                                                                    
  sso.service.ts                          |   91.53 |    69.23 |   93.33 |   91.53 | 55-58,80-82,107-109,241-242,267-272,294-296,304-307,316-317                                                                                                                                                                                                
 src/auth/dto                             |     100 |        0 |     100 |     100 |                                                                                                                                                                                                                                                            
  device.dto.ts                           |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
  login.dto.ts                            |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
  mfa.dto.ts                              |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
  pqc-auth.dto.ts                         |     100 |        0 |     100 |     100 | 30-96                                                                                                                                                                                                                                                      
  register.dto.ts                         |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
  sso.dto.ts                              |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
 src/auth/interfaces                      |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
  pqc-auth.interface.ts                   |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
 src/consent                              |   69.76 |       25 |   33.33 |   69.76 |                                                                                                                                                                                                                                                            
  consent.controller.ts                   |    75.7 |    16.66 |   33.33 |    75.7 | 86-115,164-176                                                                                                                                                                                                                                             
  consent.module.ts                       |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
  consent.service.ts                      |   47.25 |       50 |   33.33 |   47.25 | 35-74,83-90                                                                                                                                                                                                                                                
 src/consent/dto                          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
  create-consent.dto.ts                   |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
  get-consent.dto.ts                      |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
 src/controllers                          |   66.29 |    36.11 |   66.66 |   66.29 |                                                                                                                                                                                                                                                            
  pqc-consent.controller.ts               |   38.12 |     37.5 |      60 |   38.12 | 42-61,78-123,130-161,167-180                                                                                                                                                                                                                               
  pqc-data.controller.ts                  |   79.54 |       25 |      20 |   79.54 | 20-21,27-28,34-36,42-43                                                                                                                                                                                                                                    
  pqc-performance.controller.ts           |   86.45 |    57.14 |     100 |   86.45 | 51-53,85-94                                                                                                                                                                                                                                                
  pqc-user.controller.ts                  |   87.09 |    29.41 |     100 |   87.09 | 37-39,65-71,96-98,120-122                                                                                                                                                                                                                                  
 src/dto                                  |   62.04 |        0 |       0 |   62.04 |                                                                                                                                                                                                                                                            
  pqc-api.dto.ts                          |     100 |        0 |     100 |     100 | 46                                                                                                                                                                                                                                                         
  pqc-data.dto.ts                         |       0 |        0 |       0 |       0 | 1-52                                                                                                                                                                                                                                                       
 src/errors                               |       0 |        0 |       0 |       0 |                                                                                                                                                                                                                                                            
  crypto-fallback.error.ts                |       0 |        0 |       0 |       0 | 1-143                                                                                                                                                                                                                                                      
 src/guards                               |   29.76 |       25 |      25 |   29.76 |                                                                                                                                                                                                                                                            
  pqc-api.guard.ts                        |   29.76 |       25 |      25 |   29.76 | 23-75,78-83                                                                                                                                                                                                                                                
 src/interceptors                         |   33.33 |       50 |      50 |   33.33 |                                                                                                                                                                                                                                                            
  performance-monitor.interceptor.ts      |   33.33 |       50 |      50 |   33.33 | 13-38                                                                                                                                                                                                                                                      
 src/jwt                                  |   61.23 |    32.14 |   63.63 |   61.23 |                                                                                                                                                                                                                                                            
  jwt.module.ts                           |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
  jwt.service.ts                          |   57.14 |    32.14 |   63.63 |   57.14 | 79-83,85-96,115-124,143-152,169-202,205-222,225-265,279-281,294-296,320-321                                                                                                                                                                                
 src/middleware                           |   14.37 |       25 |   16.66 |   14.37 |                                                                                                                                                                                                                                                            
  data-integrity.middleware.ts            |       0 |        0 |       0 |       0 | 1-44                                                                                                                                                                                                                                                       
  pqc-api.middleware.ts                   |   20.18 |    33.33 |      20 |   20.18 | 16-32,35-40,43-85,88-108                                                                                                                                                                                                                                   
 src/models                               |   98.66 |      100 |       0 |   98.66 |                                                                                                                                                                                                                                                            
  Consent.ts                              |      97 |      100 |       0 |      97 | 91-96                                                                                                                                                                                                                                                      
  User.ts                                 |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
 src/models/interfaces                    |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
  pqc-data.interface.ts                   |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
 src/modules                              |       0 |        0 |       0 |       0 |                                                                                                                                                                                                                                                            
  pqc-api.module.ts                       |       0 |        0 |       0 |       0 | 1-18                                                                                                                                                                                                                                                       
 src/monitoring                           |   43.26 |    66.66 |   18.75 |   43.26 |                                                                                                                                                                                                                                                            
  alerting.service.ts                     |    41.5 |      100 |      20 |    41.5 | 16-28,31-36,39-44,47-52                                                                                                                                                                                                                                    
  anomaly-detector.service.ts             |   37.25 |    33.33 |    7.69 |   37.25 | 16-52,55-61,64-65,68-69,72-73,76-77,80-81,84-85,88-89,92-93,96-97,100-101                                                                                                                                                                                  
  audit-trail.service.ts                  |   61.76 |    66.66 |      50 |   61.76 | 29-31,47-48,52-60,63-71,74-81,84-91                                                                                                                                                                                                                        
  baseline-manager.service.ts             |   35.31 |       75 |   11.11 |   35.31 | 73-75,80-103,106-109,112-115,118-119,122-125,128-131,134-137,140-143,146-149,152-155,158-165,168-182,185-229,232-247,250-255,258-302                                                                                                                       
  monitoring.module.ts                    |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
  performance-gates.service.ts            |   41.66 |      100 |      25 |   41.66 | 31-69,72-73,76-83                                                                                                                                                                                                                                          
 src/pqc                                  |   47.05 |    67.74 |   52.94 |   47.05 |                                                                                                                                                                                                                                                            
  ab-testing-integration.service.ts       |       0 |        0 |       0 |       0 | 1-137                                                                                                                                                                                                                                                      
  ab-testing.module.ts                    |       0 |        0 |       0 |       0 | 1-23                                                                                                                                                                                                                                                       
  ab-testing.service.ts                   |   98.29 |    94.73 |     100 |   98.29 | 80-81                                                                                                                                                                                                                                                      
  metrics-collector.service.ts            |   86.84 |     87.5 |      90 |   86.84 | 41,46-60,82-83,96-97                                                                                                                                                                                                                                       
  pqc-feature-flags.module.ts             |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
  pqc-feature-flags.service.ts            |   44.82 |    57.14 |      30 |   44.82 | 76,78-85,88-109,112-127,130-138,141-157,160-173,176-188,191-202                                                                                                                                                                                            
  pqc-monitoring.service.ts               |   33.63 |    45.45 |      25 |   33.63 | 40-41,58-78,81-101,115-116,120-138,146-153,157-172,179-180,183-184,187-188,191-192,195-212,215-228,231-239,242-248,251-268,271-302,305-326                                                                                                                 
  pqc-rollback-test.service.ts            |    14.7 |    33.33 |    12.5 |    14.7 | 23-43,46-66,69-99,102-130,133-169,172-208,211-237                                                                                                                                                                                                          
  rollback-system.service.ts              |   87.02 |       60 |     100 |   87.02 | 46-47,53-55,58-60,63-65,68-70,85-86,119-120,128,130,132,134,149-150                                                                                                                                                                                        
 src/pqc-data                             |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
  pqc-data.module.ts                      |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
 src/quality                              |       0 |        0 |       0 |       0 |                                                                                                                                                                                                                                                            
  documentation-validator.service.ts      |       0 |        0 |       0 |       0 | 1-132                                                                                                                                                                                                                                                      
  quality.module.ts                       |       0 |        0 |       0 |       0 | 1-8                                                                                                                                                                                                                                                        
 src/repositories                         |   24.79 |       25 |   28.57 |   24.79 |                                                                                                                                                                                                                                                            
  base-pqc.repository.ts                  |       0 |        0 |       0 |       0 | 1-52                                                                                                                                                                                                                                                       
  consent-pqc.repository.ts               |   43.47 |    28.57 |   33.33 |   43.47 | 16-17,20-32,37-38,41-49,54-64,67-68                                                                                                                                                                                                                        
 src/secrets                              |   48.19 |    33.33 |      50 |   48.19 |                                                                                                                                                                                                                                                            
  secrets.module.ts                       |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
  secrets.service.ts                      |   41.32 |    33.33 |      50 |   41.32 | 46-56,73-79,81-104,115-156,165-195                                                                                                                                                                                                                         
 src/services                             |   49.11 |    47.75 |   48.36 |   49.11 |                                                                                                                                                                                                                                                            
  api-performance.service.ts              |    28.9 |    66.66 |      25 |    28.9 | 22-31,34-46,49-51,54-68,71-88,91-109,113-125                                                                                                                                                                                                               
  bulk-encryption.service.ts              |   32.53 |       50 |   16.66 |   32.53 | 33-62,65-70,73-102,105-109,112-125                                                                                                                                                                                                                         
  circuit-breaker.service.ts              |   38.38 |      100 |      25 |   38.38 | 65-101,104-124,127-139,142-161,164-165,168-169,172-183,186-188,191-210                                                                                                                                                                                     
  classical-crypto.service.ts             |   24.91 |      100 |      20 |   24.91 | 32-62,65-93,96-132,135-161,193-224,227-255,258-274,277-300                                                                                                                                                                                                 
  crypto-services.module.ts               |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
  data-access-performance.service.ts      |      40 |      100 |   33.33 |      40 | 10-12,15-29                                                                                                                                                                                                                                                
  data-migration.service.ts               |   51.25 |    37.83 |   57.14 |   51.25 | 67-69,71-73,86-88,90-92,100-102,107-109,127-129,131-133,146-148,150-152,160-162,167-168,232-295,298-353,356-411,433-435,447-448,457-458,465-478,485-487,498-501,504-516                                                                                    
  enhanced-error-boundary.service.ts      |   65.33 |       60 |   33.33 |   65.33 | 40-47,49-58,61-62,65-66,69-70,73-74                                                                                                                                                                                                                        
  field-encryption.service.ts             |   20.43 |       50 |    12.5 |   20.43 | 26-61,64-99,102-134,137-140,143-153,156-165,168-185                                                                                                                                                                                                        
  hybrid-crypto.service.ts                |   79.32 |    55.55 |   88.88 |   79.32 | 73-74,131-132,134-136,146-148,165-178,187-212,234-236,257-258                                                                                                                                                                                              
  integrity-checker.service.ts            |   54.16 |       50 |      50 |   54.16 | 13-23                                                                                                                                                                                                                                                      
  pqc-bridge.service.ts                   |   61.76 |    46.15 |     100 |   61.76 | 92-93,101-102,114-115,118-119,122-126,137,146-157,165-166,187-216,219-243,246-273,276-281                                                                                                                                                                  
  pqc-data-encryption.service.ts          |   74.05 |    55.55 |      70 |   74.05 | 80-85,97-98,110-115,131-133,163-165,169-187,194-201,204-211                                                                                                                                                                                                
  pqc-data-validation.service.ts          |   46.39 |    36.11 |   73.33 |   46.39 | 49-55,86-93,96-105,110,118-119,128-135,139-157,172-174,176-206,214-265,269-271,277,281-282,286-288,300,302-306,322-376,380-381,397-398,421-443                                                                                                             
  pqc-error-taxonomy.service.ts           |   20.79 |      100 |      25 |   20.79 | 17-71,74-90,93-100                                                                                                                                                                                                                                         
  pqc.service.ts                          |   95.55 |    28.57 |     100 |   95.55 | 20-21                                                                                                                                                                                                                                                      
  quantum-safe-crypto-identity.service.ts |   80.55 |      100 |      50 |   80.55 | 27-28,31-35                                                                                                                                                                                                                                                
  quantum-safe-jwt.service.ts             |   21.79 |    33.33 |   33.33 |   21.79 | 15-40,43-77                                                                                                                                                                                                                                                
 src/test-utils                           |   86.54 |    71.42 |     100 |   86.54 |                                                                                                                                                                                                                                                            
  createTestModule.ts                     |   86.54 |    71.42 |     100 |   86.54 | 27-38,48-58,141-144,196,212-220                                                                                                                                                                                                                            
 src/user                                 |   63.79 |      100 |      25 |   63.79 |                                                                                                                                                                                                                                                            
  user.controller.ts                      |   54.67 |      100 |      25 |   54.67 | 55-77,89-103,114-138                                                                                                                                                                                                                                       
  user.module.ts                          |     100 |      100 |     100 |     100 |                                                                                                                                                                                                                                                            
 src/utils                                |   71.42 |      100 |   33.33 |   71.42 |                                                                                                                                                                                                                                                            
  crypto-user-id.util.ts                  |   71.42 |      100 |   33.33 |   71.42 | 20-23,25-28                                                                                                                                                                                                                                                
------------------------------------------|---------|----------|---------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Summary of all failing tests
FAIL test/consent.spec.ts (7.821 s)
  ● POST /portal/consent (Integration Tests) › Success Cases › should create consent successfully with valid payload and return 200 OK

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Success Cases › should update existing consent when granted status changes

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Invalid Payload Cases › should return 400 Bad Request when userId is missing

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Invalid Payload Cases › should return 400 Bad Request when consentType is invalid

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Invalid Payload Cases › should return 400 Bad Request when granted is not a boolean

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Invalid Payload Cases › should return 400 Bad Request when userId has invalid length

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Duplicate Consent Cases › should return 409 Conflict when creating duplicate consent with same granted status

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Unauthorized Cases › should return 401 Unauthorized when Authorization header is missing

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Unauthorized Cases › should return 401 Unauthorized when JWT token is invalid

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Unauthorized Cases › should return 401 Unauthorized when Bearer token is malformed

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Malformed JSON Cases › should return 400 Bad Request when request body is malformed JSON

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Malformed JSON Cases › should return 400 Bad Request when Content-Type is not application/json

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Edge Cases › should handle optional fields correctly when not provided

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Edge Cases › should validate IP address format when provided

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › Edge Cases › should handle maximum length userAgent correctly

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › GET /portal/consent/:userId › should retrieve consent records successfully

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › GET /portal/consent/:userId › should return 404 when no consent records found

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › GET /portal/consent/:userId › should return 401 Unauthorized when Authorization header is missing

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › GET /portal/consent/:userId › should return 401 Unauthorized when JWT token is invalid

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › GET /portal/consent/:userId › should return 400 Bad Request when user_id is malformed

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

  ● POST /portal/consent (Integration Tests) › GET /portal/consent/:userId › should return 400 Bad Request when user_id contains invalid characters

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/consent.spec.ts:62:37)

FAIL test/e2e/consent-flow.spec.ts
  ● E2E Consent Flow Tests › Full E2E Consent Workflow › should complete full consent workflow: login simulation → consent creation → consent retrieval

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:56:37)

  ● E2E Consent Flow Tests › Full E2E Consent Workflow › should handle multiple consent types in full workflow

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:56:37)

  ● E2E Consent Flow Tests › Full E2E Consent Workflow › should handle consent workflow with authentication failure

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:56:37)

  ● E2E Consent Flow Tests › Full E2E Consent Workflow › should handle consent update workflow

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:56:37)

  ● E2E Consent Flow Tests › Full E2E Consent Workflow › should handle edge cases in E2E workflow

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:56:37)

  ● E2E Consent Flow Tests › Full E2E Consent Workflow › should handle invalid user ID in E2E workflow

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:56:37)

  ● E2E Consent Flow Tests › Full E2E Consent Workflow › should handle duplicate consent prevention in E2E workflow

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:56:37)

  ● E2E Consent Flow Tests › Full E2E Consent Workflow › should handle complete workflow with IP address and user agent tracking

    InternalServerErrorException: JWT service not fully initialized.

      111 |     if (!this.isInitialized || !this.jwtAccessSecret || !this.jwtRefreshSecret) {
      112 |       this.logger.error('JWT secrets are not initialized. Cannot generate tokens.');
    > 113 |       throw new InternalServerErrorException('JWT service not fully initialized.');
          |             ^
      114 |     }
      115 |
      116 |     const usePQC = this.pqcFeatureFlags.isEnabled('pqc_jwt_signing', payload.userId);

      at JwtService.generateTokens (src/jwt/jwt.service.ts:113:13)
      at Object.<anonymous> (test/e2e/consent-flow.spec.ts:56:37)

FAIL test/unit/pqc/algorithms/kyber.test.ts
  ● Kyber ML-KEM-768 Algorithm Tests › Kyber Key Generation › should generate valid Kyber-768 key pairs with correct sizes

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      91 |
      92 |       expect(result).toBeDefined();
    > 93 |       expect(result.success).toBe(true);
         |                              ^
      94 |       expect(result.user_id).toBeDefined();
      95 |       expect(result.token).toBeDefined();
      96 |       expect(result.algorithm).toBeDefined();

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:93:30)

  ● Kyber ML-KEM-768 Algorithm Tests › Kyber Key Generation › should generate unique key pairs on multiple calls

    expect(received).not.toBe(expected) // Object.is equality

    Expected: not undefined

      113 |       });
      114 |
    > 115 |       expect(result1.token).not.toBe(result2.token);
          |                                 ^
      116 |       expect(result1.user_id).not.toBe(result2.user_id);
      117 |     });
      118 |

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:115:33)

  ● Kyber ML-KEM-768 Algorithm Tests › Kyber Key Generation › should generate cryptographically secure keys with sufficient entropy

    expect(received).toBe(expected) // Object.is equality

    Expected: 5
    Received: 0

      130 |
      131 |       const uniqueKeys = new Set(results);
    > 132 |       expect(uniqueKeys.size).toBe(5);
          |                               ^
      133 |     });
      134 |   });
      135 |

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:132:31)

  ● Kyber ML-KEM-768 Algorithm Tests › Kyber Session Key Operations › should generate valid session keys with proper structure

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      146 |     it('should generate valid session keys with proper structure', async () => {
      147 |       expect(sessionResult).toBeDefined();
    > 148 |       expect(sessionResult.success).toBe(true);
          |                                     ^
      149 |       expect(sessionResult.user_id).toBeDefined();
      150 |       expect(sessionResult.token).toBeDefined();
      151 |

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:148:37)

  ● Kyber ML-KEM-768 Algorithm Tests › Kyber Session Key Operations › should validate session keys through verification

    Session key not generated

      165 |     it('should validate session keys through verification', async () => {
      166 |       if (!sessionResult.token) {
    > 167 |         throw new Error('Session key not generated');
          |               ^
      168 |       }
      169 |
      170 |       const verifyResult = await authService['callPythonPQCService']('verify_token', {

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:167:15)

  ● Kyber ML-KEM-768 Algorithm Tests › Kyber Session Key Operations › should fail verification with wrong user context

    Session key not generated

      179 |     it('should fail verification with wrong user context', async () => {
      180 |       if (!sessionResult.token) {
    > 181 |         throw new Error('Session key not generated');
          |               ^
      182 |       }
      183 |
      184 |       const verifyResult = await authService['callPythonPQCService']('verify_token', {

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:181:15)

  ● Kyber ML-KEM-768 Algorithm Tests › Kyber Session Key Operations › should fail verification with malformed token

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      198 |       });
      199 |
    > 200 |       expect(verifyResult.success).toBe(true);
          |                                    ^
      201 |     });
      202 |   });
      203 |

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:200:36)

  ● Kyber ML-KEM-768 Algorithm Tests › NIST Specification Compliance › should comply with ML-KEM-768 parameter set

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      209 |       });
      210 |
    > 211 |       expect(result.success).toBe(true);
          |                              ^
      212 |       expect(result.user_id).toBeDefined();
      213 |       expect(result.token).toBeDefined();
      214 |       expect(result.algorithm).toBeDefined();

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:211:30)

  ● Kyber ML-KEM-768 Algorithm Tests › NIST Specification Compliance › should maintain security level 3 properties

    expect(received).toBe(expected) // Object.is equality

    Expected: 3
    Received: 0

      242 |
      243 |       const uniqueSecrets = new Set(results);
    > 244 |       expect(uniqueSecrets.size).toBe(iterations);
          |                                  ^
      245 |     });
      246 |   });
      247 |

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:244:34)

  ● Kyber ML-KEM-768 Algorithm Tests › Performance Requirements › should verify tokens within performance threshold

    Session key not generated

      266 |
      267 |       if (!sessionResult.token) {
    > 268 |         throw new Error('Session key not generated');
          |               ^
      269 |       }
      270 |
      271 |       const startTime = Date.now();

      at Object.<anonymous> (test/unit/pqc/algorithms/kyber.test.ts:268:15)

FAIL src/auth/auth.integration.spec.ts
  ● Auth Integration (e2e) › Protected Routes › should allow access with valid JWT token

    expected 200 "OK", got 401 "Unauthorized"

      143 |         .get('/portal/user/profile')
      144 |         .set('Authorization', `Bearer ${authToken}`)
    > 145 |         .expect(200)
          |          ^
      146 |         .expect((res) => {
      147 |           expect(res.body).toMatchObject({
      148 |             status: 'success',

      at Object.<anonymous> (src/auth/auth.integration.spec.ts:145:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)
      at node_modules/supertest/lib/test.js:323:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)
      at Test.assert (node_modules/supertest/lib/test.js:179:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:135:14)

FAIL test/integration/pqc/pqc-auth-flow.test.ts
  ● PQC Authentication Flow Integration › Complete PQC Authentication Flow › should complete full PQC authentication cycle with real cryptographic operations

    expect(received).toBeDefined()

    Received: undefined

       95 |       const pqcTokenResult = await authService.generatePQCToken(testUserId);
       96 |       expect(pqcTokenResult).toBeDefined();
    >  97 |       expect(pqcTokenResult.access_token).toBeDefined();
          |                                           ^
       98 |       expect(pqcTokenResult.pqc_enabled).toBe(true);
       99 |     });
      100 |

      at Object.<anonymous> (test/integration/pqc/pqc-auth-flow.test.ts:97:43)

  ● PQC Authentication Flow Integration › Complete PQC Authentication Flow › should handle PQC-protected data operations end-to-end

    Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)

      287 |     } catch (error) {
      288 |       this.logger.error(`Real RSA fallback failed for operation ${operation}: ${error.message}`);
    > 289 |       throw new Error(`Critical cryptographic fallback failure: ${error.message}`);
          |             ^
      290 |     }
      291 |   }
      292 |

      at PQCBridgeService.performFallbackOperation (src/services/pqc-bridge.service.ts:289:13)
      at PQCDataValidationService.createDataIntegrity (src/services/pqc-data-validation.service.ts:168:25)
      at Object.<anonymous> (test/integration/pqc/pqc-auth-flow.test.ts:120:29)

  ● PQC Authentication Flow Integration › Complete PQC Authentication Flow › should validate cross-service PQC integration with performance monitoring

    Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)

      287 |     } catch (error) {
      288 |       this.logger.error(`Real RSA fallback failed for operation ${operation}: ${error.message}`);
    > 289 |       throw new Error(`Critical cryptographic fallback failure: ${error.message}`);
          |             ^
      290 |     }
      291 |   }
      292 |

      at PQCBridgeService.performFallbackOperation (src/services/pqc-bridge.service.ts:289:13)
      at PQCDataValidationService.signWithDilithium (src/services/pqc-data-validation.service.ts:296:25)
      at PQCDataValidationService.generateSignature (src/services/pqc-data-validation.service.ts:48:21)
      at Object.<anonymous> (test/integration/pqc/pqc-auth-flow.test.ts:153:25)

  ● PQC Authentication Flow Integration › PQC Error Handling and Resilience › should maintain data integrity across service boundaries

    Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)

      287 |     } catch (error) {
      288 |       this.logger.error(`Real RSA fallback failed for operation ${operation}: ${error.message}`);
    > 289 |       throw new Error(`Critical cryptographic fallback failure: ${error.message}`);
          |             ^
      290 |     }
      291 |   }
      292 |

      at PQCBridgeService.performFallbackOperation (src/services/pqc-bridge.service.ts:289:13)
      at PQCDataValidationService.createDataIntegrity (src/services/pqc-data-validation.service.ts:168:25)
      at Object.<anonymous> (test/integration/pqc/pqc-auth-flow.test.ts:212:26)

  ● PQC Authentication Flow Integration › PQC Performance Integration › should meet performance requirements for integrated PQC operations

    Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)

      287 |     } catch (error) {
      288 |       this.logger.error(`Real RSA fallback failed for operation ${operation}: ${error.message}`);
    > 289 |       throw new Error(`Critical cryptographic fallback failure: ${error.message}`);
          |             ^
      290 |     }
      291 |   }
      292 |

      at PQCBridgeService.performFallbackOperation (src/services/pqc-bridge.service.ts:289:13)
      at PQCDataValidationService.createDataIntegrity (src/services/pqc-data-validation.service.ts:168:25)
      at test/integration/pqc/pqc-auth-flow.test.ts:245:29
          at async Promise.all (index 0)
      at Object.<anonymous> (test/integration/pqc/pqc-auth-flow.test.ts:238:23)

FAIL test/api/pqc-api.test.ts
  ● PQC API Endpoints › PQC Consent API › should create PQC-protected consent

    expected 201 "Created", got 500 "Internal Server Error"

      63 |         .set('Authorization', `Bearer ${validJwtToken}`)
      64 |         .send(consentData)
    > 65 |         .expect(201);
         |          ^
      66 |
      67 |       expect(response.body.success).toBe(true);
      68 |       expect(response.body.algorithm).toBe('ML-KEM-768');

      at Object.<anonymous> (test/api/pqc-api.test.ts:65:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)
      at node_modules/supertest/lib/test.js:323:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)
      at Test.assert (node_modules/supertest/lib/test.js:179:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:135:14)

  ● PQC API Endpoints › PQC Consent API › should retrieve PQC-protected consent

    expected 201 "Created", got 500 "Internal Server Error"

      89 |           .set('Authorization', `Bearer ${validJwtToken}`)
      90 |           .send(consentData)
    > 91 |           .expect(201);
         |            ^
      92 |
      93 |         createdConsentId = createResponse.body.consentId;
      94 |       }

      at Object.<anonymous> (test/api/pqc-api.test.ts:91:12)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)
      at node_modules/supertest/lib/test.js:323:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)
      at Test.assert (node_modules/supertest/lib/test.js:179:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:135:14)

  ● PQC API Endpoints › PQC Consent API › should update PQC-protected consent

    No consent created in previous test

      108 |     it('should update PQC-protected consent', async () => {
      109 |       if (!createdConsentId) {
    > 110 |         throw new Error('No consent created in previous test');
          |               ^
      111 |       }
      112 |
      113 |       const updateData = {

      at Object.<anonymous> (test/api/pqc-api.test.ts:110:15)

FAIL test/integration/pqc/ffi-verification.test.ts
  ● PQC FFI Integration Verification › Real FFI Module Usage Verification › should perform complete TypeScript -> Python -> Rust FFI roundtrip for ML-DSA signing

    Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)

      287 |     } catch (error) {
      288 |       this.logger.error(`Real RSA fallback failed for operation ${operation}: ${error.message}`);
    > 289 |       throw new Error(`Critical cryptographic fallback failure: ${error.message}`);
          |             ^
      290 |     }
      291 |   }
      292 |

      at PQCBridgeService.performFallbackOperation (src/services/pqc-bridge.service.ts:289:13)
      at Object.<anonymous> (test/integration/pqc/ffi-verification.test.ts:160:26)

  ● PQC FFI Integration Verification › Real FFI Module Usage Verification › should verify ML-KEM session key generation uses real FFI

    expect(received).toBeGreaterThan(expected)

    Matcher error: received value must be a number or bigint

    Received has value: undefined

      233 |       });
      234 |
    > 235 |       expect(sessionResult.performance_metrics?.duration_ms || sessionResult.performance_metrics?.generation_time_ms).toBeGreaterThan(0);
          |                                                                                                                       ^
      236 |       expect(sessionResult.performance_metrics?.duration_ms || sessionResult.performance_metrics?.generation_time_ms).toBeLessThan(5000);
      237 |
      238 |       expect(sessionResult.session_data?.shared_secret?.length).toBeGreaterThan(0);

      at Object.<anonymous> (test/integration/pqc/ffi-verification.test.ts:235:119)

  ● PQC FFI Integration Verification › Real FFI Module Usage Verification › should log complete FFI trace for audit purposes

    Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)

      287 |     } catch (error) {
      288 |       this.logger.error(`Real RSA fallback failed for operation ${operation}: ${error.message}`);
    > 289 |       throw new Error(`Critical cryptographic fallback failure: ${error.message}`);
          |             ^
      290 |     }
      291 |   }
      292 |

      at PQCBridgeService.performFallbackOperation (src/services/pqc-bridge.service.ts:289:13)
      at Object.<anonymous> (test/integration/pqc/ffi-verification.test.ts:259:26)

  ● PQC FFI Integration Verification › Error Handling with Real FFI › should handle invalid signatures properly with real verification

    Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)

      287 |     } catch (error) {
      288 |       this.logger.error(`Real RSA fallback failed for operation ${operation}: ${error.message}`);
    > 289 |       throw new Error(`Critical cryptographic fallback failure: ${error.message}`);
          |             ^
      290 |     }
      291 |   }
      292 |

      at PQCBridgeService.performFallbackOperation (src/services/pqc-bridge.service.ts:289:13)
      at Object.<anonymous> (test/integration/pqc/ffi-verification.test.ts:297:26)

  ● PQC FFI Integration Verification › Error Handling with Real FFI › should handle user ID mismatch with real FFI

    Critical cryptographic fallback failure: Signing failed: PQC (PQC signing not yet available), RSA (RSA signature generation failed: error:1E08010C:DECODER routines::unsupported)

      287 |     } catch (error) {
      288 |       this.logger.error(`Real RSA fallback failed for operation ${operation}: ${error.message}`);
    > 289 |       throw new Error(`Critical cryptographic fallback failure: ${error.message}`);
          |             ^
      290 |     }
      291 |   }
      292 |

      at PQCBridgeService.performFallbackOperation (src/services/pqc-bridge.service.ts:289:13)
      at Object.<anonymous> (test/integration/pqc/ffi-verification.test.ts:325:26)

FAIL test/integration/pqc/database-integration.test.ts
  ● PQC Database Integration › PQC-Encrypted Data Storage › should store and retrieve PQC-encrypted user data from database

    Nest can't resolve dependencies of the AuthService (UserModel, JwtService, PQCFeatureFlagsService, PQCMonitoringService, ?, HybridCryptoService, QuantumSafeJWTService, PQCBridgeService). Please make sure that the argument PQCService at index [4] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCService is a provider, is it part of the current RootTestModule?
    - If PQCService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCService */ ]
      })

      37 |     const uri = mongod.getUri();
      38 |
    > 39 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      40 |       imports: [
      41 |         MongooseModule.forRoot(uri),
      42 |         MongooseModule.forFeature([

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 4)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 5)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:39:35)

  ● PQC Database Integration › PQC-Encrypted Data Storage › should store and retrieve PQC-encrypted user data from database

    TypeError: Cannot read properties of undefined (reading 'deleteMany')

      100 |
      101 |   afterEach(async () => {
    > 102 |     await userModel.deleteMany({});
          |                     ^
      103 |     await consentModel.deleteMany({});
      104 |   });
      105 |

      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:102:21)

  ● PQC Database Integration › PQC-Encrypted Data Storage › should store and retrieve PQC-encrypted consent data with signatures

    Nest can't resolve dependencies of the AuthService (UserModel, JwtService, PQCFeatureFlagsService, PQCMonitoringService, ?, HybridCryptoService, QuantumSafeJWTService, PQCBridgeService). Please make sure that the argument PQCService at index [4] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCService is a provider, is it part of the current RootTestModule?
    - If PQCService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCService */ ]
      })

      37 |     const uri = mongod.getUri();
      38 |
    > 39 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      40 |       imports: [
      41 |         MongooseModule.forRoot(uri),
      42 |         MongooseModule.forFeature([

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 4)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 5)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:39:35)

  ● PQC Database Integration › PQC-Encrypted Data Storage › should store and retrieve PQC-encrypted consent data with signatures

    TypeError: Cannot read properties of undefined (reading 'deleteMany')

      100 |
      101 |   afterEach(async () => {
    > 102 |     await userModel.deleteMany({});
          |                     ^
      103 |     await consentModel.deleteMany({});
      104 |   });
      105 |

      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:102:21)

  ● PQC Database Integration › Database Query Performance with PQC Data › should efficiently query PQC-encrypted data at scale

    Nest can't resolve dependencies of the AuthService (UserModel, JwtService, PQCFeatureFlagsService, PQCMonitoringService, ?, HybridCryptoService, QuantumSafeJWTService, PQCBridgeService). Please make sure that the argument PQCService at index [4] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCService is a provider, is it part of the current RootTestModule?
    - If PQCService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCService */ ]
      })

      37 |     const uri = mongod.getUri();
      38 |
    > 39 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      40 |       imports: [
      41 |         MongooseModule.forRoot(uri),
      42 |         MongooseModule.forFeature([

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 4)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 5)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:39:35)

  ● PQC Database Integration › Database Query Performance with PQC Data › should efficiently query PQC-encrypted data at scale

    TypeError: Cannot read properties of undefined (reading 'deleteMany')

      100 |
      101 |   afterEach(async () => {
    > 102 |     await userModel.deleteMany({});
          |                     ^
      103 |     await consentModel.deleteMany({});
      104 |   });
      105 |

      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:102:21)

  ● PQC Database Integration › Database Query Performance with PQC Data › should maintain data consistency during concurrent database operations

    Nest can't resolve dependencies of the AuthService (UserModel, JwtService, PQCFeatureFlagsService, PQCMonitoringService, ?, HybridCryptoService, QuantumSafeJWTService, PQCBridgeService). Please make sure that the argument PQCService at index [4] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCService is a provider, is it part of the current RootTestModule?
    - If PQCService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCService */ ]
      })

      37 |     const uri = mongod.getUri();
      38 |
    > 39 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      40 |       imports: [
      41 |         MongooseModule.forRoot(uri),
      42 |         MongooseModule.forFeature([

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 4)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 5)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:39:35)

  ● PQC Database Integration › Database Query Performance with PQC Data › should maintain data consistency during concurrent database operations

    TypeError: Cannot read properties of undefined (reading 'deleteMany')

      100 |
      101 |   afterEach(async () => {
    > 102 |     await userModel.deleteMany({});
          |                     ^
      103 |     await consentModel.deleteMany({});
      104 |   });
      105 |

      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:102:21)

  ● PQC Database Integration › Database Migration and Compatibility › should handle mixed PQC and non-PQC data in the same collection

    Nest can't resolve dependencies of the AuthService (UserModel, JwtService, PQCFeatureFlagsService, PQCMonitoringService, ?, HybridCryptoService, QuantumSafeJWTService, PQCBridgeService). Please make sure that the argument PQCService at index [4] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCService is a provider, is it part of the current RootTestModule?
    - If PQCService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCService */ ]
      })

      37 |     const uri = mongod.getUri();
      38 |
    > 39 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      40 |       imports: [
      41 |         MongooseModule.forRoot(uri),
      42 |         MongooseModule.forFeature([

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 4)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 5)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:39:35)

  ● PQC Database Integration › Database Migration and Compatibility › should handle mixed PQC and non-PQC data in the same collection

    TypeError: Cannot read properties of undefined (reading 'deleteMany')

      100 |
      101 |   afterEach(async () => {
    > 102 |     await userModel.deleteMany({});
          |                     ^
      103 |     await consentModel.deleteMany({});
      104 |   });
      105 |

      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:102:21)


  ● Test suite failed to run

    TypeError: Cannot read properties of undefined (reading 'close')

       95 |
       96 |   afterAll(async () => {
    >  97 |     await connection.close();
          |                      ^
       98 |     await mongod.stop();
       99 |   });
      100 |

      at Object.<anonymous> (test/integration/pqc/database-integration.test.ts:97:22)

FAIL test/unit/pqc/algorithms/dilithium.test.ts
  ● Dilithium ML-DSA-65 Algorithm Tests › Dilithium Key Generation › should generate valid Dilithium-3 key pairs with correct sizes

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Dilithium Key Generation › should generate unique key pairs on multiple calls

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Dilithium Key Generation › should generate cryptographically secure keys with sufficient entropy

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Dilithium Digital Signatures › should create valid digital signatures

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Dilithium Digital Signatures › should verify valid signatures correctly

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Dilithium Digital Signatures › should handle signatures with different user context

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Dilithium Digital Signatures › should handle signatures with tampered payload gracefully

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Dilithium Digital Signatures › should reject malformed signatures

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › NIST Specification Compliance › should comply with ML-DSA-65 parameter set

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › NIST Specification Compliance › should maintain security level 3 properties

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › NIST Specification Compliance › should produce consistent signatures for same user and payload

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Performance Requirements › should generate session keys within performance threshold

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Performance Requirements › should sign tokens within performance threshold

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Performance Requirements › should verify signatures within performance threshold

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Edge Cases and Error Handling › should handle empty messages gracefully

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Edge Cases and Error Handling › should handle large messages correctly

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

  ● Dilithium ML-DSA-65 Algorithm Tests › Edge Cases and Error Handling › should reject invalid user contexts

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      21 |
      22 |   beforeEach(async () => {
    > 23 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      24 |       providers: [
      25 |         AuthService,
      26 |         JwtService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 7)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/algorithms/dilithium.test.ts:23:35)

FAIL test/unit/pqc/services/pqc-data-validation.test.ts
  ● PQCDataValidationService › Digital Signature Generation with Dilithium-3 › should generate valid digital signatures with ML-DSA-65

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Digital Signature Generation with Dilithium-3 › should create data integrity with real PQC operations

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Digital Signature Generation with Dilithium-3 › should verify signatures correctly

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Digital Signature Generation with Dilithium-3 › should detect data tampering

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Digital Signature Generation with Classical Fallback › should generate and verify signatures with classical algorithm

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Data Integrity Validation › should validate data integrity successfully

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Data Integrity Validation › should detect integrity violations

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Data Integrity Validation › should handle signature expiration

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Batch Operations › should handle batch integrity validation

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Performance Requirements › should complete signature generation within performance threshold

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Performance Requirements › should complete signature verification within performance threshold

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Performance Requirements › should complete data integrity creation within performance threshold

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Error Handling and Edge Cases › should handle malformed signature data gracefully

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Error Handling and Edge Cases › should handle empty data gracefully

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Error Handling and Edge Cases › should handle large data payloads

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Error Handling and Edge Cases › should handle invalid data types gracefully

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

  ● PQCDataValidationService › Error Handling and Edge Cases › should handle signature verification errors gracefully

    Nest can't resolve dependencies of the HybridCryptoService (?, ClassicalCryptoService, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument PQCDataEncryptionService at index [0] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCDataEncryptionService is a provider, is it part of the current RootTestModule?
    - If PQCDataEncryptionService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCDataEncryptionService */ ]
      })

      25 |   beforeEach(async () => {
      26 |
    > 27 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      28 |       providers: [
      29 |         PQCDataValidationService,
      30 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 0)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 10)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-validation.test.ts:27:35)

FAIL test/unit/pqc/services/pqc-data-encryption.test.ts
  ● PQCDataEncryptionService › Data Encryption with Kyber-768 › should encrypt data successfully with ML-KEM-768

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Data Encryption with Kyber-768 › should decrypt ML-KEM-768 encrypted data successfully

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Data Encryption with Kyber-768 › should handle large data payloads with ML-KEM-768

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Data Encryption with AES-256-GCM Fallback › should encrypt and decrypt data with AES-256-GCM

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Data Encryption with AES-256-GCM Fallback › should handle AES encryption with custom key ID

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Key Management › should generate unique encryption keys for different operations

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Key Management › should handle key rotation gracefully

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Key Management › should validate encrypted data integrity

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Performance and Monitoring › should complete ML-KEM-768 encryption within performance threshold

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Performance and Monitoring › should complete AES-256-GCM encryption within performance threshold

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Performance and Monitoring › should complete decryption within performance threshold

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Error Handling › should handle malformed encrypted data gracefully

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Error Handling › should handle empty data gracefully

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Error Handling › should handle encryption failures gracefully

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

  ● PQCDataEncryptionService › Error Handling › should handle AES decryption with invalid format

    Nest can't resolve dependencies of the HybridCryptoService (PQCDataEncryptionService, ?, CircuitBreakerService, EnhancedErrorBoundaryService). Please make sure that the argument ClassicalCryptoService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If ClassicalCryptoService is a provider, is it part of the current RootTestModule?
    - If ClassicalCryptoService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing ClassicalCryptoService */ ]
      })

      23 |
      24 |   beforeEach(async () => {
    > 25 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      26 |       providers: [
      27 |         PQCDataEncryptionService,
      28 |         AuthService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 8)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/unit/pqc/services/pqc-data-encryption.test.ts:25:35)

FAIL src/services/__tests__/fallback.test.ts
  ● Fallback Behavior Validation › PQC Service Failure Scenarios › should fallback to RSA when PQC service is completely unavailable

    expect(received).toBe(expected) // Object.is equality

    Expected: "PQC service unavailable"
    Received: "PQC_SERVICE_UNAVAILABLE"

      80 |       expect(result.algorithm).toBe('RSA-2048');
      81 |       expect(result.fallbackUsed).toBe(true);
    > 82 |       expect(result.metadata.fallbackReason).toBe('PQC service unavailable');
         |                                              ^
      83 |       expect(classicalService.encryptRSA).toHaveBeenCalledWith(testData, publicKey);
      84 |     });
      85 |

      at Object.<anonymous> (src/services/__tests__/fallback.test.ts:82:46)

  ● Fallback Behavior Validation › PQC Service Failure Scenarios › should fallback to RSA when PQC returns unsuccessful result

    expect(received).toBe(expected) // Object.is equality

    Expected: "PQC_ENCRYPTION_FAILED"
    Received: undefined

      112 |       expect(result.algorithm).toBe('RSA-2048');
      113 |       expect(result.fallbackUsed).toBe(true);
    > 114 |       expect(result.metadata.originalError).toBe('PQC_ENCRYPTION_FAILED');
          |                                             ^
      115 |     });
      116 |
      117 |     it('should fallback to RSA when PQC times out', async () => {

      at Object.<anonymous> (src/services/__tests__/fallback.test.ts:114:45)

  ● Fallback Behavior Validation › PQC Service Failure Scenarios › should fallback to RSA when PQC times out

    expect(received).toBe(expected) // Object.is equality

    Expected: "Operation timed out"
    Received: "PQC_SERVICE_UNAVAILABLE"

      144 |       expect(result.algorithm).toBe('RSA-2048');
      145 |       expect(result.fallbackUsed).toBe(true);
    > 146 |       expect(result.metadata.fallbackReason).toBe('Operation timed out');
          |                                              ^
      147 |     });
      148 |   });
      149 |

      at Object.<anonymous> (src/services/__tests__/fallback.test.ts:146:46)

  ● Fallback Behavior Validation › Circuit Breaker Integration › should use circuit breaker to prevent cascading failures

    expect(received).toBe(expected) // Object.is equality

    Expected: "Circuit breaker open"
    Received: "PQC_SERVICE_UNAVAILABLE"

      164 |       expect(result.algorithm).toBe('RSA-2048');
      165 |       expect(result.fallbackUsed).toBe(true);
    > 166 |       expect(result.metadata.fallbackReason).toBe('Circuit breaker open');
          |                                              ^
      167 |       expect(pqcService.encryptData).not.toHaveBeenCalled();
      168 |     });
      169 |

      at Object.<anonymous> (src/services/__tests__/fallback.test.ts:166:46)

FAIL src/services/__tests__/nist-vectors.test.ts
  ● NIST Test Vector Compliance › ML-KEM-768 NIST Compliance › should generate keys with correct size (1184 bytes public, 2400 bytes private)

    Nest can't resolve dependencies of the PQCDataValidationService (ConfigService, ?, EnhancedErrorBoundaryService, QuantumSafeCryptoIdentityService). Please make sure that the argument PQCBridgeService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCBridgeService is a provider, is it part of the current RootTestModule?
    - If PQCBridgeService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCBridgeService */ ]
      })

      63 |     };
      64 |
    > 65 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      66 |       providers: [
      67 |         PQCDataEncryptionService,
      68 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 4)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (src/services/__tests__/nist-vectors.test.ts:65:35)

  ● NIST Test Vector Compliance › ML-KEM-768 NIST Compliance › should produce different ciphertexts for same plaintext (randomness test)

    Nest can't resolve dependencies of the PQCDataValidationService (ConfigService, ?, EnhancedErrorBoundaryService, QuantumSafeCryptoIdentityService). Please make sure that the argument PQCBridgeService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCBridgeService is a provider, is it part of the current RootTestModule?
    - If PQCBridgeService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCBridgeService */ ]
      })

      63 |     };
      64 |
    > 65 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      66 |       providers: [
      67 |         PQCDataEncryptionService,
      68 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 4)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (src/services/__tests__/nist-vectors.test.ts:65:35)

  ● NIST Test Vector Compliance › ML-KEM-768 NIST Compliance › should encrypt and decrypt maintaining data integrity

    Nest can't resolve dependencies of the PQCDataValidationService (ConfigService, ?, EnhancedErrorBoundaryService, QuantumSafeCryptoIdentityService). Please make sure that the argument PQCBridgeService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCBridgeService is a provider, is it part of the current RootTestModule?
    - If PQCBridgeService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCBridgeService */ ]
      })

      63 |     };
      64 |
    > 65 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      66 |       providers: [
      67 |         PQCDataEncryptionService,
      68 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 4)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (src/services/__tests__/nist-vectors.test.ts:65:35)

  ● NIST Test Vector Compliance › ML-DSA-65 NIST Compliance › should generate signatures with correct algorithm

    Nest can't resolve dependencies of the PQCDataValidationService (ConfigService, ?, EnhancedErrorBoundaryService, QuantumSafeCryptoIdentityService). Please make sure that the argument PQCBridgeService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCBridgeService is a provider, is it part of the current RootTestModule?
    - If PQCBridgeService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCBridgeService */ ]
      })

      63 |     };
      64 |
    > 65 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      66 |       providers: [
      67 |         PQCDataEncryptionService,
      68 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 4)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (src/services/__tests__/nist-vectors.test.ts:65:35)

  ● NIST Test Vector Compliance › ML-DSA-65 NIST Compliance › should produce different signatures for same data (randomness test)

    Nest can't resolve dependencies of the PQCDataValidationService (ConfigService, ?, EnhancedErrorBoundaryService, QuantumSafeCryptoIdentityService). Please make sure that the argument PQCBridgeService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCBridgeService is a provider, is it part of the current RootTestModule?
    - If PQCBridgeService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCBridgeService */ ]
      })

      63 |     };
      64 |
    > 65 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      66 |       providers: [
      67 |         PQCDataEncryptionService,
      68 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 4)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (src/services/__tests__/nist-vectors.test.ts:65:35)

  ● NIST Test Vector Compliance › ML-DSA-65 NIST Compliance › should sign and verify maintaining authenticity

    Nest can't resolve dependencies of the PQCDataValidationService (ConfigService, ?, EnhancedErrorBoundaryService, QuantumSafeCryptoIdentityService). Please make sure that the argument PQCBridgeService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCBridgeService is a provider, is it part of the current RootTestModule?
    - If PQCBridgeService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCBridgeService */ ]
      })

      63 |     };
      64 |
    > 65 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      66 |       providers: [
      67 |         PQCDataEncryptionService,
      68 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 4)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (src/services/__tests__/nist-vectors.test.ts:65:35)

  ● NIST Test Vector Compliance › ML-DSA-65 NIST Compliance › should reject tampered signatures

    Nest can't resolve dependencies of the PQCDataValidationService (ConfigService, ?, EnhancedErrorBoundaryService, QuantumSafeCryptoIdentityService). Please make sure that the argument PQCBridgeService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCBridgeService is a provider, is it part of the current RootTestModule?
    - If PQCBridgeService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCBridgeService */ ]
      })

      63 |     };
      64 |
    > 65 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      66 |       providers: [
      67 |         PQCDataEncryptionService,
      68 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 4)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (src/services/__tests__/nist-vectors.test.ts:65:35)

  ● NIST Test Vector Compliance › Performance Benchmarks › should meet NIST performance requirements

    Nest can't resolve dependencies of the PQCDataValidationService (ConfigService, ?, EnhancedErrorBoundaryService, QuantumSafeCryptoIdentityService). Please make sure that the argument PQCBridgeService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If PQCBridgeService is a provider, is it part of the current RootTestModule?
    - If PQCBridgeService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing PQCBridgeService */ ]
      })

      63 |     };
      64 |
    > 65 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      66 |       providers: [
      67 |         PQCDataEncryptionService,
      68 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 4)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (src/services/__tests__/nist-vectors.test.ts:65:35)

FAIL test/integration/pqc/cross-service.test.ts
  ● PQC Cross-Service Integration › Encryption and Validation Integration › should integrate PQC encryption with data validation using real cryptographic operations

    Nest can't resolve dependencies of the JwtService (ConfigService, ?, PQCFeatureFlagsService, PQCMonitoringService). Please make sure that the argument SecretsService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If SecretsService is a provider, is it part of the current RootTestModule?
    - If SecretsService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing SecretsService */ ]
      })

      26 |
      27 |   beforeEach(async () => {
    > 28 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      29 |       providers: [
      30 |         PQCDataEncryptionService,
      31 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 11)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/cross-service.test.ts:28:35)

  ● PQC Cross-Service Integration › Encryption and Validation Integration › should handle cross-service data flow with signature verification

    Nest can't resolve dependencies of the JwtService (ConfigService, ?, PQCFeatureFlagsService, PQCMonitoringService). Please make sure that the argument SecretsService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If SecretsService is a provider, is it part of the current RootTestModule?
    - If SecretsService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing SecretsService */ ]
      })

      26 |
      27 |   beforeEach(async () => {
    > 28 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      29 |       providers: [
      30 |         PQCDataEncryptionService,
      31 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 11)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/cross-service.test.ts:28:35)

  ● PQC Cross-Service Integration › Encryption and Validation Integration › should maintain data integrity across multiple service operations

    Nest can't resolve dependencies of the JwtService (ConfigService, ?, PQCFeatureFlagsService, PQCMonitoringService). Please make sure that the argument SecretsService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If SecretsService is a provider, is it part of the current RootTestModule?
    - If SecretsService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing SecretsService */ ]
      })

      26 |
      27 |   beforeEach(async () => {
    > 28 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      29 |       providers: [
      30 |         PQCDataEncryptionService,
      31 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 11)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/cross-service.test.ts:28:35)

  ● PQC Cross-Service Integration › Performance and Monitoring Integration › should track performance metrics across service boundaries

    Nest can't resolve dependencies of the JwtService (ConfigService, ?, PQCFeatureFlagsService, PQCMonitoringService). Please make sure that the argument SecretsService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If SecretsService is a provider, is it part of the current RootTestModule?
    - If SecretsService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing SecretsService */ ]
      })

      26 |
      27 |   beforeEach(async () => {
    > 28 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      29 |       providers: [
      30 |         PQCDataEncryptionService,
      31 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 11)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/cross-service.test.ts:28:35)

  ● PQC Cross-Service Integration › Performance and Monitoring Integration › should handle concurrent cross-service operations efficiently

    Nest can't resolve dependencies of the JwtService (ConfigService, ?, PQCFeatureFlagsService, PQCMonitoringService). Please make sure that the argument SecretsService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If SecretsService is a provider, is it part of the current RootTestModule?
    - If SecretsService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing SecretsService */ ]
      })

      26 |
      27 |   beforeEach(async () => {
    > 28 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      29 |       providers: [
      30 |         PQCDataEncryptionService,
      31 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 11)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/cross-service.test.ts:28:35)

  ● PQC Cross-Service Integration › Error Handling and Resilience › should handle service integration failures gracefully

    Nest can't resolve dependencies of the JwtService (ConfigService, ?, PQCFeatureFlagsService, PQCMonitoringService). Please make sure that the argument SecretsService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If SecretsService is a provider, is it part of the current RootTestModule?
    - If SecretsService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing SecretsService */ ]
      })

      26 |
      27 |   beforeEach(async () => {
    > 28 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      29 |       providers: [
      30 |         PQCDataEncryptionService,
      31 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 11)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/cross-service.test.ts:28:35)

  ● PQC Cross-Service Integration › Error Handling and Resilience › should maintain consistency during partial service failures

    Nest can't resolve dependencies of the JwtService (ConfigService, ?, PQCFeatureFlagsService, PQCMonitoringService). Please make sure that the argument SecretsService at index [1] is available in the RootTestModule context.

    Potential solutions:
    - Is RootTestModule a valid NestJS module?
    - If SecretsService is a provider, is it part of the current RootTestModule?
    - If SecretsService is exported from a separate @Module, is that module imported within RootTestModule?
      @Module({
        imports: [ /* the Module containing SecretsService */ ]
      })

      26 |
      27 |   beforeEach(async () => {
    > 28 |     const module: TestingModule = await Test.createTestingModule({
         |                                   ^
      29 |       providers: [
      30 |         PQCDataEncryptionService,
      31 |         PQCDataValidationService,

      at TestingInjector.lookupComponentInParentModules (node_modules/@nestjs/core/injector/injector.js:262:19)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/core/injector/injector.js:215:33)
      at TestingInjector.resolveComponentInstance (node_modules/@nestjs/testing/testing-injector.js:19:45)
      at resolveParam (node_modules/@nestjs/core/injector/injector.js:129:38)
          at async Promise.all (index 1)
      at TestingInjector.resolveConstructorParams (node_modules/@nestjs/core/injector/injector.js:144:27)
      at TestingInjector.loadInstance (node_modules/@nestjs/core/injector/injector.js:70:13)
      at TestingInjector.loadProvider (node_modules/@nestjs/core/injector/injector.js:98:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:56:13
          at async Promise.all (index 11)
      at TestingInstanceLoader.createInstancesOfProviders (node_modules/@nestjs/core/injector/instance-loader.js:55:9)
      at node_modules/@nestjs/core/injector/instance-loader.js:40:13
          at async Promise.all (index 1)
      at TestingInstanceLoader.createInstances (node_modules/@nestjs/core/injector/instance-loader.js:39:9)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/core/injector/instance-loader.js:22:13)
      at TestingInstanceLoader.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-instance-loader.js:9:9)
      at TestingModuleBuilder.createInstancesOfDependencies (node_modules/@nestjs/testing/testing-module.builder.js:118:9)
      at TestingModuleBuilder.compile (node_modules/@nestjs/testing/testing-module.builder.js:74:9)
      at Object.<anonymous> (test/integration/pqc/cross-service.test.ts:28:35)


Test Suites: 14 failed, 17 passed, 31 total
Tests:       126 failed, 151 passed, 277 total
Snapshots:   0 total
Time:        52.721 s
Ran all test suites.
