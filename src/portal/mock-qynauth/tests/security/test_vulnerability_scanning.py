import pytest
import requests
import sys
import os
import subprocess
import time

sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../..'))

from your_pqc_module import PQCAuth

class TestVulnerabilityScanning:

    def test_sql_injection_protection(self):
        """Test SQL injection attack prevention"""
        pqc = PQCAuth()

        injection_payloads = [
            "'; DROP TABLE users; --",
            "' OR '1'='1",
            "admin'; UPDATE users SET password='hacked' WHERE username='admin'; --",
            "' UNION SELECT * FROM sensitive_data; --"
        ]

        for payload in injection_payloads:
            with pytest.raises((ValueError, Exception)):
                pqc.authenticate(payload, "password")

    def test_buffer_overflow_protection(self):
        """Test buffer overflow protection"""
        pqc = PQCAuth()

        large_input = "A" * 10000  # 10KB input
        very_large_input = "B" * 100000  # 100KB input

        with pytest.raises((ValueError, MemoryError, Exception)):
            pqc.authenticate(large_input, "password")

        with pytest.raises((ValueError, MemoryError, Exception)):
            pqc.mock_process_data(very_large_input)

    def test_timing_attack_resistance(self):
        """Test resistance to timing attacks"""
        pqc = PQCAuth()

        pqc.mock_register_user("timing_test_user", "correct_password")

        times_correct = []
        times_incorrect = []

        for _ in range(10):
            start = time.time()
            pqc.authenticate("timing_test_user", "correct_password")
            times_correct.append(time.time() - start)

            start = time.time()
            try:
                pqc.authenticate("timing_test_user", "wrong_password")
            except:
                pass
            times_incorrect.append(time.time() - start)

        avg_correct = sum(times_correct) / len(times_correct)
        avg_incorrect = sum(times_incorrect) / len(times_incorrect)

        timing_ratio = abs(avg_correct - avg_incorrect) / max(avg_correct, avg_incorrect)
        assert timing_ratio < 0.1  # Less than 10% timing difference

    def test_race_condition_protection(self):
        """Test protection against race conditions"""
        import threading

        pqc = PQCAuth()
        results = []
        errors = []

        def concurrent_operation(user_id):
            try:
                username = f"user_{user_id}"
                pqc.mock_register_user(username, f"password_{user_id}")
                auth_result = pqc.authenticate(username, f"password_{user_id}")
                results.append(auth_result == True)
            except Exception as e:
                errors.append(str(e))

        threads = []
        for i in range(20):
            thread = threading.Thread(target=concurrent_operation, args=(i,))
            threads.append(thread)
            thread.start()

        for thread in threads:
            thread.join()

        assert len(errors) == 0, f"Race condition errors: {errors}"
        assert len(results) == 20
        assert all(results), "Some concurrent operations failed"

    def test_memory_disclosure_protection(self):
        """Test protection against memory disclosure attacks"""
        pqc = PQCAuth()

        pqc.mock_register_user("sensitive_user", "sensitive_password")
        pqc.authenticate("sensitive_user", "sensitive_password")
        keypair = pqc.generate_keypair()

        import gc
        gc.collect()

        memory_dump = str(gc.get_objects())

        assert "sensitive_password" not in memory_dump
        assert "sensitive_user" not in memory_dump.lower()

    def test_input_fuzzing(self):
        """Test input fuzzing for unexpected crashes"""
        pqc = PQCAuth()

        fuzz_inputs = [
            "",  # Empty string
            "\x00\x01\x02",  # Binary data
            "ÿÿÿÿ",  # Unicode extremes
            "\n\r\t",  # Control characters
            "🔐🔑💀",  # Emojis
            "a" * 1000,  # Long string
            None,  # Null input (if handled)
        ]

        for fuzz_input in fuzz_inputs:
            try:
                if fuzz_input is not None:
                    pqc.authenticate(fuzz_input, "password")
            except (ValueError, TypeError, UnicodeError):
                pass
            except Exception as e:
                print(f"Unexpected exception with input {repr(fuzz_input)}: {e}")
