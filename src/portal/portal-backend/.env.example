# .env.example for Minkalla Portal Backend
#
# @file .env.example
# @description Template file for environment variables required by the Quantum-Safe Privacy Portal Backend.
# This file provides detailed explanations for each variable and should be copied to a '.env' file
# for local development, with actual secret values inserted. DO NOT COMMIT .env TO GIT!
#
# @author Minkalla
# @license MIT
#
# @remarks
# Adheres to "no regrets" quality by providing exhaustive documentation for environmental configurations.
# Essential for streamlined developer onboarding and consistent local environments.

# --- Application Environment ---
# NODE_ENV: Specifies the application's operating environment.
#   - 'development': For local development. Enables development-specific features (e.g., Swagger UI, detailed logging).
#   - 'production': For live deployments. Optimizes performance and enables production-grade security.
#   - 'test': For running automated tests.
NODE_ENV=development

# PORT: The port number on which the Express server will listen.
#   - For local Docker Compose setup, this maps to the host's port.
#   - For cloud deployments (e.g., AWS Elastic Beanstalk), this is the port the container exposes internally.
PORT=8080

# --- Database Configuration (MongoDB) ---
# MONGO_URI: The connection string for your MongoDB database.
#   - For local Docker Compose: Use 'mongodb://mongo:27017/portal_dev' (refers to the 'mongo' service in docker-compose.yml).
#   - For MongoDB Atlas: Use the SRV connection string provided by Atlas, ensuring you insert the correct username and password.
#     Example: mongodb+srv://<username>:<password>@yourcluster.mongodb.net/your_db_name?retryWrites=true&w=majority
#   - The '/portal_dev' part specifies the database name to connect to for development.
MONGO_URI=mongodb://mongo:27017/portal_dev

# --- JWT Authentication Secrets ---
# JWT_ACCESS_SECRET: A strong, random secret key used for signing JWT Access Tokens.
#   - CRITICAL: MUST be a long, complex, random string (e.g., 32+ characters).
#   - NEVER hardcode this in source code.
#   - For production, use a secure secret management service (e.g., AWS Secrets Manager).
JWT_ACCESS_SECRET=your_local_jwt_access_secret

# JWT_REFRESH_SECRET: A strong, random secret key used for signing JWT Refresh Tokens.
#   - CRITICAL: MUST be a long, complex, random string (e.g., 32+ characters).
#   - NEVER hardcode this in source code.
#   - For production, use a secure secret management service.
JWT_REFRESH_SECRET=your_local_jwt_refresh_secret

# --- API Documentation (Swagger UI) ---
# ENABLE_SWAGGER_DOCS: Controls whether the Swagger UI documentation is served.
#   - 'true': Enables /api-docs endpoint (recommended for development and staging).
#   - 'false': Disables /api-docs endpoint (CRITICAL for production security to avoid exposing API internals).
ENABLE_SWAGGER_DOCS=true

# --- Frontend Integration ---
# FRONTEND_URL: The URL of the frontend application. Used for CORS configuration or redirection.
#   - For local development: Typically 'http://localhost:3000' or similar port where your frontend runs.
#   - For production: The live domain of your frontend application.
FRONTEND_URL=http://localhost:3000