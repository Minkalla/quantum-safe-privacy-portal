services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    # env_file: # Commented out for CI compatibility
    #   - .env # Commented out as .env is not present in CI environment
    environment:
      - NODE_ENV=development
      - ENABLE_SWAGGER_DOCS=true
      - PORT=8080
      # Pass AWS credentials from the host's environment
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      # - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN} # Uncomment if you use a temporary AWS token
      - AWS_REGION=${AWS_REGION} # Ensure this matches your AWS_REGION in .env and your actual region
      # ADDED: X-Ray Daemon address for the backend service
      - AWS_XRAY_DAEMON_ADDRESS=xray-daemon:2000
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=portal_user
      - POSTGRES_PASSWORD=portal_password
      - POSTGRES_DB=portal_dev
      - JWT_ACCESS_SECRET_ID=${JWT_ACCESS_SECRET_ID}
      - JWT_REFRESH_SECRET_ID=${JWT_REFRESH_SECRET_ID}
      - FRONTEND_URL=${FRONTEND_URL}
      - APP_VERSION=${APP_VERSION}
      - SKIP_SECRETS_MANAGER=${SKIP_SECRETS_MANAGER} # Ensure this is set for app code expecting SKIP_SECRETS_MANAGER

    depends_on:
      - postgres
    restart: always

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: portal_user
      POSTGRES_PASSWORD: portal_password
      POSTGRES_DB: portal_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portal_user -d portal_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

volumes:
  postgres-data:
